attr(archie, "verbose") <- verbose
archie_name <- as.character(ensym(archie))
if(prev_verbose) {
message("Changed verbosity of architecture", archie_name,
" to ", "verbose", ".\n")
}
archie
}
set_verbose(arc, TRUE)
traceback()
ensym(arc)
set_verbose(archie = arc, TRUE)
set_verbose <- function(archie, verbose) {
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
archie_name <- "as.character(ensym(archie))"
if(prev_verbose) {
message("Changed verbosity of architecture", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(archie = arc, TRUE)
s <- function(archie) as.character(ensym(archie))
s(arc)
s <- function(archie) { archie_name <- as.character(ensym(archie)); archie_name}
s(arc)
library(tectr)
arc <- architecture()
set_verbose(arc, TRUE)
library(tectr)
rm(set_verbose)
set_verbose(arc, TRUE)
ensym("archie")
?ensym
set_verbose(arc, TRUE)
library(tectr)
?enexpr
set_verbose(arc, TRUE)
library(tectr)
set_verbose <- function(archie, verbose) {
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
archie_name <- as.character(expr(archie))
if(prev_verbose) {
message("Changed verbosity of architecture ", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(arc, TRUE)
set_verbose <- function(archie, verbose) {
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
archie_name <- as.character(enexpr(archie))
if(prev_verbose) {
message("Changed verbosity of architecture ", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(arc, TRUE)
set_verbose <- function(archie, verbose) {
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
archie_name <- as.character(enexpr(archie)[2])
if(prev_verbose) {
message("Changed verbosity of architecture ", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(arc, TRUE)
set_verbose <- function(archie, verbose) {
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
archie_name <- as.character(ensym(archie))
if(prev_verbose) {
message("Changed verbosity of architecture ", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(arc, TRUE)
set_verbose <- function(archie, verbose) {
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
archie_name <- as.character(ensyms(archie))
if(prev_verbose) {
message("Changed verbosity of architecture ", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(arc, TRUE)
set_verbose <- function(archie, verbose) {
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
archie_name <- as.character(enquo(archie))
if(prev_verbose) {
message("Changed verbosity of architecture ", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(arc, TRUE)
set_verbose <- function(archie, verbose) {
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
archie_name <- as.character(enquo(archie))[2]
if(prev_verbose) {
message("Changed verbosity of architecture ", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(arc, TRUE)
set_verbose <- function(archie, verbose) {
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
archie_name <- as.character(enquo(archie)[2])
if(prev_verbose) {
message("Changed verbosity of architecture ", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(arc, TRUE)
f <- function(foo) enquo(foo)
f(arc)
f <- function(foo) expr(foo)
f(arc)
f <- function(foo) enquo(foo)
f(arc)
f <- function(foo) enquo(foo)$expr
f(arc)
f <- function(foo) as.character(enquo(foo))
f(arc)
set_verbose <- function(archie, verbose) {
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
archie_name <- as.character(enquo(archie))[2]
if(prev_verbose) {
message("Changed verbosity of architecture ", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(arc, TRUE)
set_verbose <- function(archie, verbose) {
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
archie_name <- as.character(enquo(archie))[3]
if(prev_verbose) {
message("Changed verbosity of architecture ", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(arc, TRUE)
set_verbose <- function(archie, verbose) {
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
archie_name <- as.character(enquo(archie))[1]
if(prev_verbose) {
message("Changed verbosity of architecture ", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(arc, TRUE)
set_verbose <- function(archie, verbose) {
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
archie_name <- enquo(archie)
cat(archie)
if(prev_verbose) {
message("Changed verbosity of architecture ", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(arc, TRUE)
rm(archie)
set_verbose(arc, TRUE)
?par
set_verbose <- function(archie, verbose) {
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
archie_name <- commandArgs()
if(prev_verbose) {
message("Changed verbosity of architecture ", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(arc, TRUE)
set_verbose <- function(archie, verbose) {
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
archie_name <- commandArgs()
cat(commandArgs())
if(prev_verbose) {
message("Changed verbosity of architecture ", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(arc, TRUE)
f
f(test)
set_verbose <- function(archie, verbose) {
archie_name <- as.character(enquo(archie))
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
cat(commandArgs())
if(prev_verbose) {
message("Changed verbosity of architecture ", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(arc, TRUE)
set_verbose <- function(archie, verbose) {
archie_name <- as.character(enquo(archie))[2]
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
if(prev_verbose) {
message("Changed verbosity of architecture ", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(arc, TRUE)
library(tectr)
test()
?expect_message
?set_verbose
?par
par(oma)
par("oma")
par("oma" = c(0,0,0,0))
par("oma")
par("oma" = c(1,0,0,0))
par("oma")
par("oma" = c(0,0,0,0))
par
?knitr::opts_chunk
library(knitr)
opts_chunk
f
f <- function(foo) as.character(quo(foo))
f(arc)
f <- function(foo) as.character(expr(foo))
f(arc)
f <- function(foo) as.character(enexpr(foo))
f(arc)
set_verbose <- function(archie, verbose) {
archie_name <- as.character(enexpr(archie))
prev_verbose <- is_verbose(archie)
attr(archie, "verbose") <- verbose
if(prev_verbose) {
message("Changed verbosity of architecture ", archie_name,
" to ", verbose, ".\n")
}
archie
}
set_verbose(arc, FALSE)
set_verbose(arc, FALSE)
set_verbose(arc, TRUE)
ls(envir = global_env())
?ls
f <- function() parent.env()
f <- function() parent.frame()
f()
?match
library(devtools)
library(testthat)
context
?context
test()
test()
library(tectr)
rm(set_verbose)
test()
get_architecture
get_architecture()
library(tectr)
.arc
tectr::.arc
tectr:::.arc
get_architecture
get_architecture()
library(tectr)
get_architecture()
set_architecture(arc)
arc
architecture(1)
as_architecture(1)
library(assertthat)
library(tectr)
set_architecture(arc)
set_architecture.architecture(arc)
library(tectr)
?get_architecture
get_architecture
get_architecture()
set_architecture(archie = arc)
set_architecture(1)
set_architecture.default(1)
set_architecture.default <- function(archie = NULL) {
stop("Supply a valid architecture.")
}
set_architecture(1)
library(tectr)
set_architecture(set)
rm(set_architecture.default())
rm(set_architecture.default
)
set_architecture(arc)
ls(envir = parent.frame())
set_architecture.architecture <- function(archie = NULL) {
archie_expr <- enexpr(archie)
cat(archie_expr)
if(as.character(archie_expr) %in% ls(envir = parent.frame())) {
.arc <- archie_expr
message("Set default architecture to ", as.character(archie_expr), ".")
} else {
stop(as.character(archie_expr), " does not exist.")
}
}
set_architecture(arc)
set_architecture.architecture(arc)
rm(set_architecture.architecture)
set_architecture.architecture(arc)
tectr::set_architecture(arc)
test()
library(tectr)
set_architecture(arc)
library(tectr)
set_architecture(arc)
set_architecture(NULL)
set_architecture(arc)
set_architecture(arc)
debug()
debug(set_architecture)
set_architecture(arc)
archie
archie_expr
archie_expr
enexpr(archie)
?enexpr
archie_expr
enexpr(archie)
library(tectr)
set_architecture(arc)
library(tectr)
get_architecture()
set_architecture(arc)
get_architecture
get_architecture()
tectr:::.arc
set_architecture(arc)
library(tectr)
get_architecture()
set_architecture(arc)
library(tectr)
get_architecture()
set_architecture(arc)
library(tectr)
set_architecture(arc)
library(tectr)
?get_architecture
set_architecture(arc)
?assign
library(tectr)
set_architecture(arc)
library(tectr)
set_architecture(arc)
get_architecture()
library(tectr)
get_architecture()
library(tectr)
get_architecture
get_architecture()
set_architecture(NULL)
set_architecture(spidr)
get_architecture()
library(tectr)
get_architecture()
library(tectr)
get_architecture()
set_architecture(arc)
get_architecture()
set_architecture(spidr)
get_architecture()
set_architecture(foo)
set_architecture(NULL)
set_architecture(arc)
set_architecture(NULL)
?UseMethod
class(NULL)
library(tectr)
set_architecture(NULL)
set_architecture(spidr)
get_architecture()
eval(get_architecture())
set_architecture(NULL)
get_architecture()
library(testthat)
test()
library(devtools)
test()
library(tectr)
test()
library(tectr)
test()
?enexpr
library(tectr)
test()
architecture(1)
architecture
as_architecture
library(tectr)
test()
?assert_that
library(tectr)
test()
library(assertthat)
test()
expr(architecture(verbose = TRUE))
expr(architecture(verbose = TRUE)) %>% as.character
library(tectr)
test()
arc1 <- architecture()
set_architecture(arc1)
get_architecture()
get_architecture() %>% class
?name
set_architecture(architecture(verbose = TRUE))
set_architecture(arc1, arc2)
library(tectr)
test()
test()
test()
?get
?enexpr
tectr_env
set_architecture(arc1)
tectr_env
tectr_env$.arc
tectr_env$.arc %>% class
tectr_env$.arc %>% eval
arc1 %>% set_verbose(FALSE)
eval(get_architecture())
tst <- new.env()
tst$a <- architecture()
set_architecture(tst$a)
?eval
environment(tst$a)
?environment
a
arc1
get_architecture
get_architecture()
set_architecture()
set_architecture(arc1)
set_architecture()
arc1 %>% set_architecture()
name(arc1)
as.name(arc1)
?assert_that
library(tectr)
test()
library(tectr)
test()
ls(arc1)
arc1$j
f <- function(x) {x}
terms(f)
body(f)
args(f)
head(f)
global_env()
get_architecture()
set_architecture(arc1)
arc1$tst <- 1
arc1
arc1$tst
get_architecture
get_architecture()
get_architecture() %>% eval
get_architecture() %>% eval %>% tst
get_architecture() %>% eval %$% tst
library(magrittr)
get_architecture() %>% eval %$% tst
f
args(f)
list(args(f))
formals(f)
f(file = 1)
df <- data.frame(1:3)
df
tst <- "X1.3"
df$tst
df %>% tst
df %$% tst
?df
d <- df
d %$% tst
?`%$%`
install.packages("lobstr")
