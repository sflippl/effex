nominations = list(geom_point(), geom_bar()),
mapping = aes(x = x)
)
tst
tectr:::required_aes(geom_point())
geom_point()$mapping
tectr:::required_aes(geom_bar())
tectr:::required_aes(geom_histogram())
tectr:::required_aes(geom_boxplot())
geom_boxplot()$mapping
covr::report()
fx_default_fxGeom_pal(fxGeom("Continuous"), AesName("x"))
?fx_default_fxGeom_pal
expect_equal(fx_default_fxGeom_pal(data, aes_name = "x"),
scale_x_continuous())
expect_identical(fx_default_fxGeom_pal(data, aes_name = "x"),
scale_x_continuous())
sc1 <- fx_default_fxGeom_pal(data, aes_name = "x")
sc1
pal1 <- fx_default_fxGeom_pal(data, aes_name = "x")
pal1
data <- dplyr::tibble(col1 = 1:10, col2 = LETTERS[1:10])
pal1 <- fx_default_fxGeom_pal(data, aes_name = "x")
pal1
mf = metaframe(fx_default(data))
mf
pal1 <- fx_default_fxGeom_pal(data, aes_name = "x")
pal2
pal1
expect_equal(pal1, list(identity, identity))
pal1 <- fx_default_fxGeom_pal(data, aes_name = "fill")
pal1
?scale_size_discrete
scale_size_discrete
data <- dplyr::tibble(column_name = 1:10)
metaframe(data) <- dplyr::tibble(
name = "column_name",
fxGeom_pal.colour_fill = scales::brewer_pal()
)
metaframe(data) <- dplyr::tibble(
name = "column_name",
fxGeom_pal.colour_fill = list(scales::brewer_pal())
) %>% as_metaframe()
sca <- fxi_layer_single(data, metaframe(data), "column_name")
sca <- tectr:::fxi_layer_single(data, metaframe(data), "column_name")
sca <- fxi_layer_single(data, aes(x = column_name), "x")
sca <- tectr:::fxi_layer_single(data, aes(x = column_name), "x")
sca
data <- fx_default(data, columns = fx_ggplot_columns)
sca <- fxi_layer_single(data, aes(x = column_name), "x")
sca <- tectr:::fxi_layer_single(data, aes(x = column_name), "x")
sca
sca[[2]]$palette
sca[[2]]$palette %>% identical(brewer_pal())
sca[[2]]$palette(3)
sca[[2]]$palette(5)
sca <- fxi_layer_single(data, aes(fill = column_name), "fill")
sca <- tectr:::fxi_layer_single(data, aes(fill = column_name), "fill")
sca
sca$palette
sca[[2]]$palette
sca[[2]]$palette(5)
covr::report()
devtools::use_test("fx-fun-ggplot-fxGeomContinuous")
covr::report()
devtools::use_test("fx-fun-ggplot-fxGeomDiscrete")
covr::report()
?coverage
?covr::exclusions
covr::package_coverage()
covr::package_coverage()
?facet_grid
?facet_wrap
?facet_null
fx_ggplot(diamonds, aes(x = x, y = y, colour = color))
fx_ggplot(diamonds, aes(x = x, y = z, colour = color))
fx_ggplot(diamonds, aes(x = x, y = y, colour = color)) -> p
p + facet_wrap(vars(cut))
p + facet_wrap(vars(cut), scales = "free")
?facet_grid
p + facet_grid(vars(cut), vars(color))
?labeller
?facet_wrap
p + facet_wrap(vars(cut, color), scales = "free")
?facet_wrap
?facet_grid
p + facet_wrap(vars(cut))
p + facet_wrap(vars(cut), margins = TRUE)
?facet_wrap
?boxcox_trans
scales::boxcox_trans
df_vdem %>% select(v2x_polyarchy, v2x_libdem) %>% fx_ggplot(aes(x = v2x_polyarchy, y = v2x_libdem))
library(tidyverse)
library(tectr)
library(vdem.tectr)
df_vdem %>% select(v2x_polyarchy, v2x_libdem) %>% fx_ggplot(aes(x = v2x_polyarchy, y = v2x_libdem))
nrow(df_vdem)
geom_path()$geom
geom_line()$geom
fxGeom_alpha.threshold = NULL
fxGeom_alpha.half = NULL
fxGeom_alpha.min = NULL
data <- df_vdem
n_row <- nrow(data)
n_row
alpha <- get_alpha(fxGeom_alpha.threshold, fxGeom_alpha.half,
fxGeom_alpha.min, n_row)
alpha <- tectr:::get_alpha(fxGeom_alpha.threshold, fxGeom_alpha.half,
fxGeom_alpha.min, n_row)
alpha
data <- df_vdem %>% select(v2x_polyarchy, v2x_libdem)
alpha <- tectr:::get_alpha(fxGeom_alpha.threshold, fxGeom_alpha.half,
fxGeom_alpha.min, n_row)
n_row <- nrow(data)
alpha <- tectr:::get_alpha(fxGeom_alpha.threshold, fxGeom_alpha.half,
fxGeom_alpha.min, n_row)
alpha
tst <- df_vdem %>% select(v2x_polyarchy, v2x_libdem)
tst
fx_ggplot(tst, aes(x = v2x_polyarchy))
fx_ggplot(tst, aes(x = v2x_polyarchy, y = v2x_libdem))
tst %>% fx_ggplot(aes(x = v2x_polyarchy, y = v2x_libdem))
df_vdem %>% select(v2x_polyarchy, v2x_libdem, year) %>% filter(year >= 1945) %>% fx_ggplot(aes(x = v2x_polyarchy, y = v2x_libdem))
df_vdem %>% select(v2x_polyarchy, v2x_libdem, year) %>% filter(year >= 1945) %>% fx_ggplot(aes(x = year, y = v2x_libdem))
df_vdem %>% select(v2x_polyarchy, v2x_libdem, year, country_name) %>% filter(year >= 1945) %>% fx_ggplot(aes(x = year, y = v2x_libdem, group = country_name))
df_vdem %>% select(v2x_polyarchy, v2x_libdem, year, country_name) %>% fx_ggplot(aes(x = year, y = v2x_libdem, group = country_name))
df_vdem %>% select(v2x_polyarchy, v2x_libdem, year, country_name) %>% fx_ggplot(aes(x = year, y = v2x_libdem))
ggplot(df_vdem, aes(x = year, y = v2x_libdem, group = country_name)) + geom_line()
ggplot(df_vdem, aes(x = year, y = v2x_libdem, group = country_name)) + geom_line(colour = "grey20")
ggplot(df_vdem, aes(x = year, y = v2x_libdem, group = country_name)) + geom_line(colour = "grey80")
ggplot(df_vdem, aes(x = year, y = v2x_libdem, group = country_name)) + geom_line() + geom_smooth
ggplot(df_vdem, aes(x = year, y = v2x_libdem, group = country_name)) + geom_line() + geom_smooth()
ggplot(df_vdem, aes(x = year, y = v2x_libdem, group = country_name)) + geom_line() + geom_smooth(aes(group = NULL))
ggplot(df_vdem, aes(x = year, y = v2x_libdem, group = country_name)) + geom_line(colour = "grey80") + geom_smooth(aes(group = NULL))
ggplot(df_vdem, aes(x = year, y = v2x_libdem, group = country_name)) + geom_line(alpha = .2) + geom_smooth(aes(group = NULL))
ggplot(df_vdem, aes(x = year, y = v2x_libdem, group = country_name)) + geom_line(alpha = .1) + geom_smooth(aes(group = NULL))
ggplot(df_vdem, aes(x = year, y = v2x_libdem, group = country_name)) + geom_line(alpha = .1) + geom_smooth(aes(group = NULL), se = FALSE)
ggplot(df_vdem, aes(x = year, y = v2x_libdem, colour = country_name)) + geom_line(alpha = .1) + geom_smooth(aes(group = NULL), se = FALSE)
ggplot(df_vdem, aes(x = year, y = v2x_libdem, colour = country_name)) + geom_line(alpha = .1, show.legend = FALSE) + geom_smooth(aes(group = NULL), se = FALSE)
ggplot(df_vdem, aes(x = year, y = v2x_libdem, colour = country_name)) + geom_line(alpha = .1, show.legend = FALSE) + geom_smooth(aes(colour = NULL), se = FALSE)
?geom_line()
ggplot(df_vdem, aes(x = year, y = v2x_libdem, colour = country_name)) + geom_line(alpha = .1, show.legend = FALSE) + geom_smooth(aes(colour = NULL), se = FALSE, show.legend = FALSE)
library(tectr)
library(tectr)
fx_default_fxGeom_class(data)
fx_default_fxGeom_class(diamonds)
fx_default_fxGeom_class(diamonds, name == "x" ~ "Spatial")
fx_default_fxGeom_class(diamonds, (name == "x") ~ "Spatial")
library(tectr)
fx_default_fxGeom_class(diamonds, (name == "x") ~ "Spatial")
fx_default_fxGeom_class(diamonds)
fx_default_fxGeom_class(diamonds, TRUE ~ "test")
fx_default_fxGeom_class(diamonds, name == "x" ~ "test")
fx_default_fxGeom_class(diamonds, expr(name) == "x" ~ "test")
fx_default_fxGeom_class(diamonds, eval(name) == "x" ~ "test")
dplyr::case_when
library(tectr)
fx_default_fxGeom_class(diamonds, eval(name) == "x" ~ "test")
?case_when
testthat::test_that
?substitute
library(tectr)
fx_default_fxGeom_class(diamonds, {if(name == "x") fxGeom_class <- "test"})
names(diamonds)
fx_default_fxGeom_class(diamonds, {if(name == "x") fxGeom_class <- "test"})
fx_default_fxGeom_class(diamonds, {stop()})
testthat::test_code
testthat::test_that
testthat:::test_code
fx_default_fxGeom_class(diamonds, {if(name == "x") fxGeom_class <- "test"})
library(tectr)
fx_default_fxGeom_class(diamonds, {if(name == "x") fxGeom_class <- "test"})
?eval_tidy
?parent.frame()
fx_default_fxGeom_class(diamonds, {if(name == "x") fxGeom_class <- "test"})
library(tectr)
fx_default_fxGeom_class(diamonds, {if(name == "x") fxGeom_class <- "test"})
library(tectr)
fx_default_fxGeom_class(diamonds, function(name, fxGeom_class) {if(name == "x") fxGeom_class <- "test"; fxGeom_class})
identity(1, 2)
library(tectr)
library(tectr)
tectr:::default_identity()
tectr:::default_identity
library(tectr)
library(tectr)
library(tectr)
library(tectr)
df <- data.frame(column_name = 1:10)
ex <-
df %>%
mutate_mf(tst = "a")
ex
metaframe(ex)
data.frame(name = "column_name", tst = "a")
test_that("mutate_mf works", {
df <- data.frame(column_name = 1:10)
ex <-
df %>%
mutate_mf(tst = "a")
expect_equal(metaframe(ex), data.frame(name = "column_name", tst = "a"))
})
library(testthat)
test_that("mutate_mf works", {
df <- data.frame(column_name = 1:10)
ex <-
df %>%
mutate_mf(tst = "a")
expect_equal(metaframe(ex), data.frame(name = "column_name", tst = "a"))
})
df <- data.frame(column_name = 1:10)
ex <-
df %>%
mutate_mf(tst = "a")
expect_equal(metaframe(ex), data.frame(name = "column_name", tst = "a"))
metaframe(ex)
data.frame(name = "column_name", tst = "a")
expect_equal(data.frame(name = "column_name", tst = "a"), data.frame(name = "column_name", tst = "a"))
all.equal(metaframe(ex), data.frame(name = "column_name", tst = "a"))
data.frame(name = "column_name", tst = "a") %>% as_metaframe %>% as.list
metaframe(ex) %>% as.list
covr::report()
library(tectr)
covr::report()
ex <-
data.frame(column_name = 1:10) %>%
fx_default(columns = "fxGeom_class") %>%
fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = 1:10) %>%
fx_default(columns = "fxGeom_class") %>%
tectr:::fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = "fxGeom_class") %>%
fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = "fxGeom_class") %>%
tectr:::fxi_labeller(vars(column_name))
ex
?label_value
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10]))
ex
metaframe(ex)
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10])) %>%
fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10])) %>%
tectr:::fxi_labeller(vars(column_name))
ex
ex("C")
ex("c")
ex(3)
labeller(letters[1:10] %>% magrittr::set_names(LETTERS[1:10]))
labeller(letters[1:10] %>% magrittr::set_names(LETTERS[1:10]))("C")
labeller(letters[1:10] %>% magrittr::set_names(LETTERS[1:10]))("c")
?labeller
labeller(column_name = letters[1:10] %>% magrittr::set_names(LETTERS[1:10]))(data.frame(column_name = "C"))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
tectr:::fxi_labeller(vars(column_name))
ex(column_name = "C")
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
tectr:::fxi_labeller(vars(column_name))
ex(data.frame(column_name = "C"))$column_name
expect_equal(ex(data.frame(column_name = "C"))$column_name, "C")
test_that("fxi_labeller works", {
expect_error(
ex <-
data.frame(column_name = 1:10) %>%
fx_default(columns = "fxGeom_class") %>%
fxi_labeller(vars(column_name))
)
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
fxi_labeller(vars(column_name))
expect_equal(ex(data.frame(column_name = "C"))$column_name, "C")
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10])) %>%
fxi_labeller(vars(column_name))
expect_equal(ex(data.frame(column_name = "C"))$column_name, "c")
})
ex <-
data.frame(column_name = LETTERS[1:10], stringsAsFactors = FALSE) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
fxi_labeller(vars(column_name))
?fxi_labeller
ex <-
data.frame(column_name = LETTERS[1:10], stringsAsFactors = FALSE) %>%
fx_default(columns = fx_ggplot_columns)
ex
data <- ex
facet_vars <- vars(column_name)
facet_vars
library(tectr)
devtools::use_package("magrittr")
library(tectr)
ex <-
data.frame(column_name = LETTERS[1:10], stringsAsFactors = FALSE) %>%
fx_default(columns = fx_ggplot_columns) %>%
fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = LETTERS[1:10], stringsAsFactors = FALSE) %>%
fx_default(columns = fx_ggplot_columns) %>%
tectr:::fxi_labeller(vars(column_name))
ex
ex(data.frame(column_name = "C"))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10])) %>%
fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10])) %>%
tectr:::fxi_labeller(vars(column_name))
ex
ex(data.frame(column_name = "C"))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10]))
data <- ex
data
vars <- get_inds(facet_vars)
vars <- tectr:::get_inds(facet_vars)
vars
lst <-
vars %>%
purrr::map(
function(var) {
mf <-
metaframe(data) %>%
dplyr::filter(name == var)
cls <- mf$fxGeom_class
fx_geom <- fxGeom(cls)
mf_args <-
mf %>%
dplyr::select(-fxGeom_class) %>%
lst_mf_args()
do.call(fxe_labeller,
rlang::list2(fxGeom_class = fx_geom, !!!mf_args))
}
) %>%
magrittr::set_names(vars) %>%
rlang::splice() %>%
ggplot2::labeller()
lst <-
vars %>%
purrr::map(
function(var) {
mf <-
metaframe(data) %>%
dplyr::filter(name == var)
cls <- mf$fxGeom_class
fx_geom <- fxGeom(cls)
mf_args <-
mf %>%
dplyr::select(-fxGeom_class) %>%
lst_mf_args()
do.call(fxe_labeller,
rlang::list2(fxGeom_class = fx_geom, !!!mf_args))
}
) %>%
magrittr::set_names(vars)
lst <-
vars %>%
purrr::map(
function(var) {
mf <-
metaframe(data) %>%
dplyr::filter(name == var)
cls <- mf$fxGeom_class
fx_geom <- fxGeom(cls)
mf_args <-
mf %>%
dplyr::select(-fxGeom_class) %>%
tectr:::lst_mf_args()
do.call(fxe_labeller,
rlang::list2(fxGeom_class = fx_geom, !!!mf_args))
}
) %>%
magrittr::set_names(vars)
lst
rlang::splice(lst)
rlang::splice(lst) %>% labeller
(rlang::splice(lst) %>% labeller)(data.frame(column_name = "C"))
(rlang::splice(lst) %>% labeller)(data.frame(column_name = "c"))
(rlang::splice(lst) %>% labeller)(data.frame(column_name = "C"))
labeller(column_name = LETTERS[1:10] %>% set_names(letters[1:10]))
labeller(column_name = LETTERS[1:10] %>% set_names(letters[1:10]))(data.frame(column_name = "C"))
labeller(column_name = LETTERS[1:10] %>% set_names(letters[1:10]))(data.frame(column_name = "c"))
library(tectr)
tst <- LETTERS[1:10] %>% set_names(letters[1:10])
tst
labeller(column_name = tst) -> tst2
tst2
tst2(data.frame(column_name = "A"))
tst2(data.frame(column_name = "a"))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10])) %>%
fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10])) %>%
tectr:::fxi_labeller(vars(column_name))
ex(data.frame(column_name = "C"))$column_name
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10]))
ex
metaframe(ex)
vars <- get_inds(facet_vars)
vars <- tectr:::get_inds(facet_vars)
vars
lst <-
vars %>%
purrr::map(
function(var) {
mf <-
metaframe(data) %>%
dplyr::filter(name == var)
cls <- mf$fxGeom_class
fx_geom <- fxGeom(cls)
mf_args <-
mf %>%
dplyr::select(-fxGeom_class) %>%
tectr:::lst_mf_args()
do.call(fxe_labeller,
rlang::list2(fxGeom_class = fx_geom, !!!mf_args))
}
)
lst
lst%>%
magrittr::set_names(vars)
lst%>%
magrittr::set_names(vars) %>%
rlang::splice() %>%
ggplot2::labeller() -> tst3
tst3
tst3("A")
tst3("a")
tst3(data.frame(column_name = "A"))
tst3(data.frame(column_name = "a"))
metaframe(ex)$fxGeom_breaks
metaframe(ex)$fxGeom_limits
lst
tst
labeller(column_name = tst)("A")
labeller(column_name = tst)(data.frame(column_name = "A"))
labeller(column_name = tst)(data.frame(column_name = ""))
labeller(column_name = tst)(data.frame(column_name = "a"))
library(tectr)
lst <-
vars %>%
purrr::map(
function(var) {
mf <-
metaframe(data) %>%
dplyr::filter(name == var)
cls <- mf$fxGeom_class
fx_geom <- fxGeom(cls)
mf_args <-
mf %>%
dplyr::select(-fxGeom_class) %>%
tectr:::lst_mf_args()
do.call(fxe_labeller,
rlang::list2(fxGeom_class = fx_geom, !!!mf_args))
}
)
lst
lst  %>%
magrittr::set_names(vars) %>%
rlang::splice() %>%
ggplot2::labeller() -> tst3
tst3
tst3(data.frame(column_name = "A"))
lst
lst %>%
magrittr::set_names(vars) %>%
rlang::splice() %>% rlang::list2()
?labeller
tst3("A")
tst3("a")
