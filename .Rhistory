testthat::test_that
?substitute
library(tectr)
fx_default_fxGeom_class(diamonds, {if(name == "x") fxGeom_class <- "test"})
names(diamonds)
fx_default_fxGeom_class(diamonds, {if(name == "x") fxGeom_class <- "test"})
fx_default_fxGeom_class(diamonds, {stop()})
testthat::test_code
testthat::test_that
testthat:::test_code
fx_default_fxGeom_class(diamonds, {if(name == "x") fxGeom_class <- "test"})
library(tectr)
fx_default_fxGeom_class(diamonds, {if(name == "x") fxGeom_class <- "test"})
?eval_tidy
?parent.frame()
fx_default_fxGeom_class(diamonds, {if(name == "x") fxGeom_class <- "test"})
library(tectr)
fx_default_fxGeom_class(diamonds, {if(name == "x") fxGeom_class <- "test"})
library(tectr)
fx_default_fxGeom_class(diamonds, function(name, fxGeom_class) {if(name == "x") fxGeom_class <- "test"; fxGeom_class})
identity(1, 2)
library(tectr)
library(tectr)
tectr:::default_identity()
tectr:::default_identity
library(tectr)
library(tectr)
library(tectr)
library(tectr)
df <- data.frame(column_name = 1:10)
ex <-
df %>%
mutate_mf(tst = "a")
ex
metaframe(ex)
data.frame(name = "column_name", tst = "a")
test_that("mutate_mf works", {
df <- data.frame(column_name = 1:10)
ex <-
df %>%
mutate_mf(tst = "a")
expect_equal(metaframe(ex), data.frame(name = "column_name", tst = "a"))
})
library(testthat)
test_that("mutate_mf works", {
df <- data.frame(column_name = 1:10)
ex <-
df %>%
mutate_mf(tst = "a")
expect_equal(metaframe(ex), data.frame(name = "column_name", tst = "a"))
})
df <- data.frame(column_name = 1:10)
ex <-
df %>%
mutate_mf(tst = "a")
expect_equal(metaframe(ex), data.frame(name = "column_name", tst = "a"))
metaframe(ex)
data.frame(name = "column_name", tst = "a")
expect_equal(data.frame(name = "column_name", tst = "a"), data.frame(name = "column_name", tst = "a"))
all.equal(metaframe(ex), data.frame(name = "column_name", tst = "a"))
data.frame(name = "column_name", tst = "a") %>% as_metaframe %>% as.list
metaframe(ex) %>% as.list
covr::report()
library(tectr)
covr::report()
ex <-
data.frame(column_name = 1:10) %>%
fx_default(columns = "fxGeom_class") %>%
fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = 1:10) %>%
fx_default(columns = "fxGeom_class") %>%
tectr:::fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = "fxGeom_class") %>%
fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = "fxGeom_class") %>%
tectr:::fxi_labeller(vars(column_name))
ex
?label_value
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10]))
ex
metaframe(ex)
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10])) %>%
fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10])) %>%
tectr:::fxi_labeller(vars(column_name))
ex
ex("C")
ex("c")
ex(3)
labeller(letters[1:10] %>% magrittr::set_names(LETTERS[1:10]))
labeller(letters[1:10] %>% magrittr::set_names(LETTERS[1:10]))("C")
labeller(letters[1:10] %>% magrittr::set_names(LETTERS[1:10]))("c")
?labeller
labeller(column_name = letters[1:10] %>% magrittr::set_names(LETTERS[1:10]))(data.frame(column_name = "C"))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
tectr:::fxi_labeller(vars(column_name))
ex(column_name = "C")
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
tectr:::fxi_labeller(vars(column_name))
ex(data.frame(column_name = "C"))$column_name
expect_equal(ex(data.frame(column_name = "C"))$column_name, "C")
test_that("fxi_labeller works", {
expect_error(
ex <-
data.frame(column_name = 1:10) %>%
fx_default(columns = "fxGeom_class") %>%
fxi_labeller(vars(column_name))
)
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
fxi_labeller(vars(column_name))
expect_equal(ex(data.frame(column_name = "C"))$column_name, "C")
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10])) %>%
fxi_labeller(vars(column_name))
expect_equal(ex(data.frame(column_name = "C"))$column_name, "c")
})
ex <-
data.frame(column_name = LETTERS[1:10], stringsAsFactors = FALSE) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
fxi_labeller(vars(column_name))
?fxi_labeller
ex <-
data.frame(column_name = LETTERS[1:10], stringsAsFactors = FALSE) %>%
fx_default(columns = fx_ggplot_columns)
ex
data <- ex
facet_vars <- vars(column_name)
facet_vars
library(tectr)
devtools::use_package("magrittr")
library(tectr)
ex <-
data.frame(column_name = LETTERS[1:10], stringsAsFactors = FALSE) %>%
fx_default(columns = fx_ggplot_columns) %>%
fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = LETTERS[1:10], stringsAsFactors = FALSE) %>%
fx_default(columns = fx_ggplot_columns) %>%
tectr:::fxi_labeller(vars(column_name))
ex
ex(data.frame(column_name = "C"))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10])) %>%
fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10])) %>%
tectr:::fxi_labeller(vars(column_name))
ex
ex(data.frame(column_name = "C"))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10]))
data <- ex
data
vars <- get_inds(facet_vars)
vars <- tectr:::get_inds(facet_vars)
vars
lst <-
vars %>%
purrr::map(
function(var) {
mf <-
metaframe(data) %>%
dplyr::filter(name == var)
cls <- mf$fxGeom_class
fx_geom <- fxGeom(cls)
mf_args <-
mf %>%
dplyr::select(-fxGeom_class) %>%
lst_mf_args()
do.call(fxe_labeller,
rlang::list2(fxGeom_class = fx_geom, !!!mf_args))
}
) %>%
magrittr::set_names(vars) %>%
rlang::splice() %>%
ggplot2::labeller()
lst <-
vars %>%
purrr::map(
function(var) {
mf <-
metaframe(data) %>%
dplyr::filter(name == var)
cls <- mf$fxGeom_class
fx_geom <- fxGeom(cls)
mf_args <-
mf %>%
dplyr::select(-fxGeom_class) %>%
lst_mf_args()
do.call(fxe_labeller,
rlang::list2(fxGeom_class = fx_geom, !!!mf_args))
}
) %>%
magrittr::set_names(vars)
lst <-
vars %>%
purrr::map(
function(var) {
mf <-
metaframe(data) %>%
dplyr::filter(name == var)
cls <- mf$fxGeom_class
fx_geom <- fxGeom(cls)
mf_args <-
mf %>%
dplyr::select(-fxGeom_class) %>%
tectr:::lst_mf_args()
do.call(fxe_labeller,
rlang::list2(fxGeom_class = fx_geom, !!!mf_args))
}
) %>%
magrittr::set_names(vars)
lst
rlang::splice(lst)
rlang::splice(lst) %>% labeller
(rlang::splice(lst) %>% labeller)(data.frame(column_name = "C"))
(rlang::splice(lst) %>% labeller)(data.frame(column_name = "c"))
(rlang::splice(lst) %>% labeller)(data.frame(column_name = "C"))
labeller(column_name = LETTERS[1:10] %>% set_names(letters[1:10]))
labeller(column_name = LETTERS[1:10] %>% set_names(letters[1:10]))(data.frame(column_name = "C"))
labeller(column_name = LETTERS[1:10] %>% set_names(letters[1:10]))(data.frame(column_name = "c"))
library(tectr)
tst <- LETTERS[1:10] %>% set_names(letters[1:10])
tst
labeller(column_name = tst) -> tst2
tst2
tst2(data.frame(column_name = "A"))
tst2(data.frame(column_name = "a"))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10])) %>%
fxi_labeller(vars(column_name))
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10])) %>%
tectr:::fxi_labeller(vars(column_name))
ex(data.frame(column_name = "C"))$column_name
ex <-
data.frame(column_name = LETTERS[1:10]) %>%
fx_default(columns = c("fxGeom_class", "fxGeom_limits")) %>%
mutate_mf(fxGeom_breaks = list(letters[1:10]))
ex
metaframe(ex)
vars <- get_inds(facet_vars)
vars <- tectr:::get_inds(facet_vars)
vars
lst <-
vars %>%
purrr::map(
function(var) {
mf <-
metaframe(data) %>%
dplyr::filter(name == var)
cls <- mf$fxGeom_class
fx_geom <- fxGeom(cls)
mf_args <-
mf %>%
dplyr::select(-fxGeom_class) %>%
tectr:::lst_mf_args()
do.call(fxe_labeller,
rlang::list2(fxGeom_class = fx_geom, !!!mf_args))
}
)
lst
lst%>%
magrittr::set_names(vars)
lst%>%
magrittr::set_names(vars) %>%
rlang::splice() %>%
ggplot2::labeller() -> tst3
tst3
tst3("A")
tst3("a")
tst3(data.frame(column_name = "A"))
tst3(data.frame(column_name = "a"))
metaframe(ex)$fxGeom_breaks
metaframe(ex)$fxGeom_limits
lst
tst
labeller(column_name = tst)("A")
labeller(column_name = tst)(data.frame(column_name = "A"))
labeller(column_name = tst)(data.frame(column_name = ""))
labeller(column_name = tst)(data.frame(column_name = "a"))
library(tectr)
lst <-
vars %>%
purrr::map(
function(var) {
mf <-
metaframe(data) %>%
dplyr::filter(name == var)
cls <- mf$fxGeom_class
fx_geom <- fxGeom(cls)
mf_args <-
mf %>%
dplyr::select(-fxGeom_class) %>%
tectr:::lst_mf_args()
do.call(fxe_labeller,
rlang::list2(fxGeom_class = fx_geom, !!!mf_args))
}
)
lst
lst  %>%
magrittr::set_names(vars) %>%
rlang::splice() %>%
ggplot2::labeller() -> tst3
tst3
tst3(data.frame(column_name = "A"))
lst
lst %>%
magrittr::set_names(vars) %>%
rlang::splice() %>% rlang::list2()
?labeller
tst3("A")
tst3("a")
citation("methods")
devtools::use_package("methods")
geom_bin2d()
library(tidyverse)
geom_bin2d()
geom_bin2d()$geom
geom_bin2d()$stat
geom_hex()$stat
geom_density2d()$stat
library(tectr)
fx_ggplot(df_vdem %>% select(v2x_polyarchy, v2x_libdem), aes(x = v2x_polyarchy, v2x_libdem))
library(vdem.tectr)
fx_ggplot(df_vdem %>% select(v2x_polyarchy, v2x_libdem), aes(x = v2x_polyarchy, v2x_libdem))
fx_ggplot(df_vdem %>% select(v2x_polyarchy, v2x_libdem, year), aes(x = v2x_polyarchy, y = v2x_libdem, colour = year))
library(tectr)
?setClassUnion
fx_ggplot(df_vdem %>% select(v2x_polyarchy, v2x_libdem, year), aes(x = v2x_polyarchy, y = v2x_libdem, colour = year))
library(tectr)
ggplot(df_vdem, aes(x = v2x_polyarchy, y = v2x_libdem, ymin = v2x_libdem_codelow, ymax = v2x_libdem_codehigh)) + geom_point()
ggplot(df_vdem, aes(x = v2x_polyarchy, y = v2x_libdem, ymin = v2x_libdem_codelow, ymax = v2x_libdem_codehigh)) + geom_ribbon()
?geom_ribbon
ggplot(df_vdem, aes(x = v2x_polyarchy, y = v2x_libdem, ymin = v2x_libdem_codelow, ymax = v2x_libdem_codehigh)) + geom_point() + geom_errorbar()
ggplot(df_vdem, aes(x = v2x_polyarchy, xmin = v2x_polyarchy, xmax v2x_libdem, y = v2x_libdem, ymin = v2x_libdem_codelow, ymax = v2x_libdem_codehigh)) + geom_point() + geom_errorbar()
ggplot(df_vdem, aes(x = v2x_polyarchy, xmin = v2x_polyarchy, xmax = v2x_libdem, y = v2x_libdem, ymin = v2x_libdem_codelow, ymax = v2x_libdem_codehigh)) + geom_point() + geom_errorbar()
?geom_errorbar
ggplot(df_vdem, aes(x = v2x_polyarchy, xmin = v2x_polyarchy, xmax = v2x_libdem, y = v2x_libdem, ymin = v2x_libdem_codelow, ymax = v2x_libdem_codehigh)) + geom_linerange()
ggplot(df_vdem, aes(x = v2x_polyarchy, xmin = v2x_polyarchy, xmax = v2x_libdem, y = v2x_libdem, ymin = v2x_libdem_codelow, ymax = v2x_libdem_codehigh)) + geom_errorbarh()
ggplot(df_vdem, aes(x = v2x_polyarchy, xmin = v2x_polyarchy, xmax = v2x_libdem, y = v2x_libdem, ymin = v2x_libdem_codelow, ymax = v2x_libdem_codehigh)) + geom_errorbarh(alpha = 0.05) + geom_point()
ggplot(df_vdem %>% filter(year == 2017), aes(x = v2x_polyarchy, xmin = v2x_polyarchy, xmax = v2x_libdem, y = v2x_libdem, ymin = v2x_libdem_codelow, ymax = v2x_libdem_codehigh)) + geom_linerange() + geom_point()
df_vdem$v2exdjcbhg_ord
ggplot(df_vdem %>% filter(country_name == "Germany"), aes(year, v2exdjcbhg_ord)) +
) + geom_line()
ggplot(df_vdem %>% filter(country_name == "Germany"), aes(year, v2exdjcbhg_ord)) + geom_line()
ggplot(df_vdem %>% filter(country_name == "Germany"), aes(year, v2exdjcbhg_ord)) + geom_step()
ggplot(df_vdem %>% filter(country_name == "Germany"), aes(year, v2exdjcbhg_osp)) + geom_line()
ggplot(df_vdem %>% filter(country_name == "Germany"), aes(year, v2exdjcbhg_ord)) + geom_point()
?geom_line
ggplot(df_vdem %>% filter(country_name == "Germany"), aes(year, v2exdjcbhg_ord, group = NULL)) + geom_line()
ggplot(df_vdem %>% filter(country_name == "Germany"), aes(year, v2exdjcbhg_ord, group = NULL)) + geom_line(aes(group = country_name))
ggplot(df_vdem %>% filter(country_name == "Germany"), aes(year, v2exdjcbhg_ord, xmax = v2xexdjcbhg_ord_codehigh, xmin = v2xexdjcbhg_ord_codelow, group = NULL)) + geom_line(aes(group = country_name)) + geom_ribbon(alpha = .05)
ggplot(df_vdem %>% filter(country_name == "Germany"), aes(year, v2exdjcbhg_ord, xmax = v2exdjcbhg_ord_codehigh, xmin = v2exdjcbhg_ord_codelow, group = NULL)) + geom_line(aes(group = country_name)) + geom_ribbon(alpha = .05)
ggplot(df_vdem %>% filter(country_name == "Germany"), aes(year, v2exdjcbhg_ord, ymax = v2exdjcbhg_ord_codehigh, ymin = v2exdjcbhg_ord_codelow, group = NULL)) + geom_line(aes(group = country_name)) + geom_ribbon(alpha = .05)
ggplot(df_vdem %>% filter(country_name == "Germany"), aes(year, v2exdjcbhg_osp, ymax = v2exdjcbhg_osp_codehigh, ymin = v2exdjcbhg_osp_codelow, group = NULL)) + geom_line(aes(group = country_name)) + geom_ribbon(alpha = .1)
?quosure
?geom_pointrange
df <- data.frame(
trt = factor(c(1, 1, 2, 2)),
resp = c(1, 5, 3, 4),
group = factor(c(1, 2, 1, 2)),
upper = c(1.1, 5.3, 3.3, 4.2),
lower = c(0.8, 4.6, 2.4, 3.6)
)
p <- ggplot(df, aes(trt, resp, colour = group))
p + geom_linerange(aes(ymin = lower, ymax = upper))
p + geom_pointrange(aes(ymin = lower, ymax = upper))
p + geom_crossbar(aes(ymin = lower, ymax = upper), width = 0.2)
p + geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2)
geom_errorbar()
geom_errorbar()$geom
geom_pointrange()
geom_pointrange()$geom
?geom_pointrange
?geom_linerange
?geom_errorbarh
geom_ribbon()$geom
geom_linerange()$geom
fxGeom("OrdinalCi")
fxGeom("OrdinalCI")
library(tectr)
package?tectr
?fx_evaluate
fx_evaluate
?filepath
?as_filepath
library(tectr)
library(tectr)
library(tectr)
library(tectr)
covr::package_coverage()
?fx_ggplot
?fx_default
?fx_default_fxGeom_class
?fx_default_fxGeom_class
library(tectr)
?fx_default_fxGeom_class
fx_ggplot_columns
library(tectr)
?fxe_layer_complete_nominate
covr::report()
library(tectr)
?fxe_layer_complete_nominate
library(tectr)
?fxe_layer_nominate
?fxe_layer_complete_nominate
?GeomBoxplot
?fxe_layer_complete_nominate
library(tectr)
devtools::use_test("fx-fun-ggplot-fxGeomContinuousCI")
library(tectr)
?fx_output
?fx_info
?fx_info_title
library(tectr)
fxe_layer_complete_nominate(
fxGeom("ContinuousCI"),
AesName("y"),
data.frame(upper = 1:10, lower = 1:10),
fxGeom_assoc_vars = ggplot2::aes(upper = upper, lower = lower))
fxe_layer_complete_nominate(fxGeom("ContinuousCI"),
AesName("y"),
data.frame())
library(tectr)
fxe_layer_complete_nominate(fxGeom("ContinuousCI"),
AesName("y"),
data.frame())
fxe_layer_complete_nominate(
fxGeom("ContinuousCI"),
AesName("y"),
data.frame(upper = 1:10, lower = 1:10),
fxGeom_assoc_vars = ggplot2::aes(upper = upper, lower = lower))
tst <- aes(upper = x, lower = y, tst = tst)
library(ggplot2)
tst <- aes(upper = x, lower = y, tst = tst)
tst
tst[c("upper", "lower")] %>%
magrittr::set_names(c("xmax", "xmin"))
library(magrittr)
tst[c("upper", "lower")] %>%
magrittr::set_names(c("xmax", "xmin"))
ggplot2::geom_ribbon(new_mapping, alpha = 0.1) -> x
?warning
?supressWarnings
library(tectr)
covr::report()
devtools::use_test("fx-fun-ggplot-fxGeomOrdinalCI")
library(tectr)
devtools::use_test("fx-fun-ggplot-fxGeomTime")
library(tectr)
covr::package_coverage()
covr::report()
geom_smooth()$geom
ex3 <- fxe_layer_complete_nominate(
fxGeom("Time"), AesName("x"), data.frame(group = 1:15),
fxGeom_assoc_vars = ggplot2::aes(group = group)
)
ex3
covr::package_coverage()
?fx_ggplot
?fxe_layer_complete
?fxi_layer_complete
library(tectr)
devtools::use_readme_rmd()
devtools::use_coverage()
library(tectr)
citation("tectr")
devtools::use_travis()
?use_travis
devtools::use_coverage()
library(tectr)
