?match
match_els <- function(x, S, nomatch = 0) {
for(in seq_len(length(S))) {
if(all.equal(x, S[[i]]) == TRUE) return(i)
}
return(nomatch)
}
match_els(Content("Intelligence"), list(Content("Intelligence"), 2, Content("uzwcjgh"))
)
match_els <- function(x, S, nomatch = 0) {
for(i in seq_len(length(S))) {
if(all.equal(x, S[[i]]) == TRUE) return(i)
}
return(nomatch)
}
match_els(Content("Intelligence"), list(Content("Intelligence"), 2, Content("uzwcjgh"))
)
ls()
rm(list = ls())
?rm
?append
rel <- Relation(c("contains", "predicts"))
rel <- C_Relation(c("contains", "predicts"))
rel <- C_Relation(c("contains", "predicts"), definition = c("", ""))
rel
rel[1]
class(rel)
class(rel[1])
class(NULL)
library(tectr)
Structure()
devtools::build()
devtools::document()
devtools::build()
devtools::reload()
Structure()
?Structure
devtools::document()
devtools::document()
devtools::reload()
devtools::build()
devtools::reload()
tectr()
library(tectr)
tectr()
?Structure
Structure(Content(character(0), character(0)))
getS3method(Structure)
?tectr
devtools::build()
devtools::reload()
tectr()
Structure(Content("Intelligence"))
?textInput
devtools::load_all(".")
tectr()
Structure(Content("Intelligence"))
?submitButton
library(shiny)
?selectInput
library(tidygraph)
package?tidygraph
?tbl_graph
tbl_graph(nodes = Content("Intelligence"))
library(tectr)
tbl_graph(nodes = Content("Intelligence"))
tbl_graph(nodes = Content("Intelligence")) -> tst
?Structure
tst$nodes
?tbl_graph
?activate
activate
getS3method("activate", "tbl_graph")
?quo_text
tst$relations <- Content("predicts")
tst
print.default(tst)
print.list(tst)
print.listof(tst)
tst
?wellPanel
install.packages("magrittr")
?activate
?plotOutput
library(devtools)
document()
document()
document()
document()
library(tectr)
tectr_structure()
kljkl
?actionButton
tst
tst %>% activate(nodes)
tst %>% activate(nodes) %>% print
names(tst)
class(tst) <- list
tst
help("get nodes", package = "tidygraph")
??get nodes
help("get nodes")
.N(tst)
tst <- Structure(Content("Intelligence"), Content("Predicts"), data.frame(from = 1, to = 1, name = "Predicts"))
?Structure
?verticalLayout
?wellPanel
source('C:/Users/samue/OneDrive/Studium/S Statistik/tectr/R/shiny-tectr_structure-server.R')
?eventReactive
??Structure
?Structure
append
Content(character(0))
Content("Intelligence")
rep("", 0)
get_ref_edges <- function(variables, relations, edges) {
if(!("name" %in% colnames(edges))) edges$name <- 0
else if(is.character(edges$name)) {
# get positions from names
edges$name <- match(edges$name, relations$name)
assert_that(edges$name)
}
if(any(edges$name == 0)) warning("There are edges without known relations")
for(varnames in c("from", "to")) {
if(is.numeric(edges$varnames))
assert_that(0 < min(edges$varnames),
max(edges$varnames) < length(variables))
else if(is.character(edges$varnames)) {
# get positions from names
edges$varnames <- match(edges$varnames, variables$name)
}
else error("varnames$", varnames, "needs to contain numbers or characters.")
}
}
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
get_ref_edges <- function(variables, relations, edges) {
if(!("name" %in% colnames(edges))) edges$name <- 0
else if(is.character(edges$name)) {
# get positions from names
edges$name <- match(edges$name, relations$name)
assert_that(edges$name)
}
else if(is.numeric(edges$name))
assert_that(0 <= min(edges$name),
max(edges$name) <= length(relations))
else stop("edges$name is available but neither character nor a number.")
if(any(edges$name == 0)) warning("There are edges without known relations")
for(varnames in c("from", "to")) {
if(is.numeric(edges$varnames))
assert_that(0 < min(edges$varnames),
max(edges$varnames) <= length(variables))
else if(is.character(edges$varnames)) {
# get positions from names
edges$varnames <- match(edges$varnames, variables$name)
}
else stop("varnames$", varnames, "needs to contain numbers or characters.")
}
edges
}
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
data.frame(from = "Intelligence", to = "Intelligence", name = "predicts")
data.frame(from = "Intelligence", to = "Intelligence", name = "predicts") -> tst
tst$name
get_ref_edges <- function(variables, relations, edges) {
if(!("name" %in% colnames(edges))) edges$name <- 0
else if(is.character(edges$name) | is.factor(edges$name)) {
# get positions from names
edges$name <- match(edges$name, relations$name)
assert_that(edges$name)
}
else if(is.numeric(edges$name))
assert_that(0 <= min(edges$name),
max(edges$name) <= length(relations))
else stop("edges$name is available but neither character nor a number.")
if(any(edges$name == 0)) warning("There are edges without known relations")
for(varnames in c("from", "to")) {
if(is.numeric(edges$varnames))
assert_that(0 < min(edges$varnames),
max(edges$varnames) <= length(variables))
else if(is.character(edges$varnames)) {
# get positions from names
edges$varnames <- match(edges$varnames, variables$name)
}
else stop("varnames$", varnames, "needs to contain numbers or characters.")
}
edges
}
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
library(assertthat)
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
get_ref_edges <- function(variables, relations, edges) {
if(!("name" %in% colnames(edges))) edges$name <- 0
else if(is.character(edges$name) | is.factor(edges$name)) {
# get positions from names
edges$name <- match(edges$name, relations$name)
assert_that(edges$name)
}
else if(!is.numeric(edges$name))
stop("edges$name is available but neither character nor a number.")
assert_that(0 <= min(edges$name),
max(edges$name) <= length(relations))
if(any(edges$name == 0)) warning("There are edges without known relations")
for(varnames in c("from", "to")) {
if(is.numeric(edges$varnames))
assert_that(0 < min(edges$varnames),
max(edges$varnames) <= length(variables))
else if(is.character(edges$varnames)) {
# get positions from names
edges$varnames <- match(edges$varnames, variables$name)
}
else stop("varnames$", varnames, "needs to contain numbers or characters.")
}
edges
}
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
get_ref_edges <- function(variables, relations, edges) {
if(!("name" %in% colnames(edges))) edges$name <- 0
else if(is.character(edges$name) | is.factor(edges$name)) {
# get positions from names
edges$name <- match(edges$name, relations$name)
}
else if(!is.numeric(edges$name))
stop("edges$name is available but neither character nor a number.")
assert_that(0 <= min(edges$name),
max(edges$name) <= length(relations))
if(any(edges$name == 0)) warning("There are edges without known relations")
for(varnames in c("from", "to")) {
if(is.numeric(edges$varnames))
assert_that(0 < min(edges$varnames),
max(edges$varnames) <= length(variables))
else if(is.character(edges$varnames)) {
# get positions from names
edges$varnames <- match(edges$varnames, variables$name)
}
else stop("varnames$", varnames, "needs to contain numbers or characters.")
}
edges
}
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
get_ref_edges <- function(variables, relations, edges) {
if(!("name" %in% colnames(edges))) edges$name <- 0
else if(is.character(edges$name) | is.factor(edges$name)) {
# get positions from names
edges$name <- match(edges$name, relations$name)
}
else if(!is.numeric(edges$name))
stop("edges$name is available but neither character nor a number.")
assert_that(0 <= min(edges$name),
max(edges$name) <= length(relations))
if(any(edges$name == 0)) warning("There are edges without known relations")
for(varnames in c("from", "to")) {
if(is.numeric(edges$varnames))
assert_that(0 < min(edges$varnames),
max(edges$varnames) <= length(variables))
else if(is.character(edges$varnames)) {
# get positions from names
edges$varnames <- match(edges$varnames, variables$name)
}
else stop("varnames$", varnames, "needs to contain numbers or characters.")
}
edges
}
get_ref_edges <- function(variables, relations, edges) {
if(!("name" %in% colnames(edges))) edges$name <- 0
else if(is.character(edges$name) | is.factor(edges$name)) {
# get positions from names
edges$name <- match(edges$name, relations$name)
}
else if(!is.numeric(edges$name))
stop("edges$name is available but neither character nor a number.")
assert_that(0 <= min(edges$name),
max(edges$name) <= length(relations))
if(any(edges$name == 0)) warning("There are edges without known relations")
for(varnames in c("from", "to")) {
if(is.numeric(edges$varnames))
assert_that(0 < min(edges$varnames),
max(edges$varnames) <= length(variables))
else if(is.character(edges$varnames) | is.factor(edges$varnames)) {
# get positions from names
edges$varnames <- match(edges$varnames, variables$name)
}
else stop("varnames$", varnames, " needs to contain numbers or characters.")
}
edges
}
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
tst
tst$from
tst$from %>% is.factor
get_ref_edges <- function(variables, relations, edges) {
if(!("name" %in% colnames(edges))) edges$name <- 0
else if(is.character(edges$name) | is.factor(edges$name)) {
# get positions from names
edges$name <- match(edges$name, relations$name)
}
else if(!is.numeric(edges$name))
stop("edges$name is available but neither character nor a number.")
assert_that(0 <= min(edges$name),
max(edges$name) <= length(relations))
if(any(edges$name == 0)) warning("There are edges without known relations")
for(varnames in c("from", "to")) {
if(is.numeric(edges$varnames))
assert_that(0 < min(edges$varnames),
max(edges$varnames) <= length(variables))
else if(is.character(edges$varnames) | is.factor(edges$varnames)) {
# get positions from names
edges$varnames <- match(edges$varnames, variables$name)
}
else stop("varnames$", varnames, " needs to contain numbers or characters.")
}
edges
}
tst$from %>% is.factor
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
document()
library(tectr)
visualize_struct
devtools::build()
devtools::reload()
visualize_struct
library(tectr)
visualize_struct
devtools::load_all()
visualize_struct
visualize_struct(Structure(Content("Intelligence")))
visualize_struct(Structure(Content(c("Intelligence", "Education", "Arrogance")), C_Relation(c("causes", "enables", "prevents")), data.frame(from = c(1, 1, 3), to = c(3, 2, 2), c("causes", "enables", "prevents")))
)
visualize_struct(Structure(Content(c("Intelligence", "Education", "Arrogance")), C_Relation(c("causes", "enables", "prevents")), data.frame(from = c(1, 1, 3), to = c(3, 2, 2), name = c("causes", "enables", "prevents"))))
visualize_struct(Structure(Content(c("Intelligence", "Education", "Arrogance")), C_Relation(c("causes", "enables", "prevents")), data.frame(from = c(1, 1, 3), to = c(3, 2, 2), name = c("causes", "enables", "prevents"))))
tst <- Structure(Content(c("Intelligence", "Education", "Arrogance")), C_Relation(c("causes", "enables", "prevents")), data.frame(from = c(1, 1, 3), to = c(3, 2, 2), name = c("causes", "enables", "prevents")))
devtools::build()
devtools::load_all()
get_ref_edges
tst <- Structure(Content(c("Intelligence", "Education", "Arrogance")), C_Relation(c("causes", "enables", "prevents")), data.frame(from = c(1, 1, 3), to = c(3, 2, 2), name = c("causes", "enables", "prevents")))
tst
visualize_struct(tst)
tectr_structure(tst)
tectr_structure
tectr_structure_server
tectr_structure()
tectr_structure_server <- function(structure) {
function(input, output) {
# This creates the structure that has initially been put in.
re_structure <- eventReactive(input$initialize, structure)
# Add Content -------------------------------------------------------------
re_structure <- eventReactive(input$content_add, {
extend_variables(re_structure(),
Content(input$content_name,
input$content_definition))
})
# Add Relations -----------------------------------------------------------
re_structure <- eventReactive(input$relation_add, {
extend_relations(re_structure(),
C_Relation(input$relation_name,
input$relation_definition))
})
# Add Edges -----------------------------------------------------------
re_structure <- eventReactive(input$edge, {
extend_edges(re_structure(),
data.frame(from = input$edge_from,
to = input$edge_to,
name = input$edge_name))
})
output$edge_name <- renderUI({
selectInput(inputId = "edge_name",
label = "Relation",
choices = re_structure() %>%
attr("relations") %$%
name)
})
output$edge_from <- renderUI({
selectInput(inputId = "edge_from",
label = "From",
choices = re_structure() %>%
activate(nodes) %>%
as.data.frame %$%
name,
multiple = TRUE)
})
output$edge_to <- renderUI({
selectInput(inputId = "edge_to",
label = "To",
choices = re_structure() %>%
activate(nodes) %>%
as.data.frame %$%
name,
multiple = TRUE)
})
# Visualize structure ---------------------------------------------------
output$structure_verbatim <- renderPrint(re_structure() %>% print)
output$structure_visual <- renderPlot(re_structure() %>% visualize_struct)
}
}
tectr_structure_ui <- function() {
fluidPage(
sidebarLayout(
sidebarPanel(
verticalLayout(
wellPanel(
actionButton(inputId = "initialize",
label = "Get original structure")),
wellPanel(
textInput(inputId = "content_name",
label = "Content Name"),
textInput(inputId = "content_definition",
label = "Content Definition"),
actionButton(inputId = "content_add",
label = "Add Content")),
wellPanel(
textInput(inputId = "relation_name",
label = "Relation Name"),
textInput(inputId = "relation_definition",
label = "Relation Definition"),
actionButton(inputId = "relation_add",
label = "Add Relation")),
wellPanel(
uiOutput(outputId = "edge_name"),
uiOutput(outputId = "edge_from"),
uiOutput(outputId = "edge_to")))),
mainPanel(
verticalLayout(
verbatimTextOutput(outputId = "structure_verbatim"),
plotOutput(outputId = "structure_visual")))))
}
tectr_structure <- function(structure = Structure()) {
ui <- tectr_structure_ui()
server <- tectr_structure_server(structure)
shinyApp(ui = ui, server = server) %>% runApp()
}
tectr_structure(tst)
library(tidyverse)
tectr_structure(tst)
library(magrittr)
library(ggraph)
library(tidygraph)
tectr_structure(tst)
tectr_structure_server(tst)
f <- function(struct) function() struct
f(1)
g <- f(1)
g()
install.packages("rmarkdown")
library(devtools)
packrat::on()
install.packages("rmarkdown")
install.packages("tidyverse")
install.packages("sf")
install.packages("sp")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
load("data/GED 17.1.Rdata")
library(sf)
ged171 <- ged171 %>%
st_as_sf(coords = c("coords.x1", "coords.x2"))
head(ged171 %>%
select(year, dyad_name,
date_start, date_end, best))
library(devtools)
install.packages("devtools")
library(devtools)
install_github("hadley/ggplot2")
install.packages("rlang")
install_cran("rlang")
packrat::on()
install_github("hadley/ggplot2")
install.packages("digest")
install_github("hadley/ggplot2")
packrat::disable()
install.packages("digest")
install.packages("digest")
install.packages("digest")
install.packages("tidyverse")
devtools::install_github("hadley/ggplot2")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
load("data/GED 17.1.Rdata")
library(sf)
ged171 <- ged171 %>%
st_as_sf(coords = c("coords.x1", "coords.x2"))
head(ged171 %>%
select(year, dyad_name,
date_start, date_end, best))
cou <- st_read("data/Countries Shapefile/ne_10m_admin_0_countries.shx")
ggplot(cou) +
geom_sf() +
geom_sf(data = ged171, mapping = aes(size = best), colour = "blue")
?head
cou <- st_read("data/Countries Shapefile/ne_10m_admin_0_countries.shx")
ggplot(cou) +
geom_sf() +
geom_sf(data = head(ged171, 100),
mapping = aes(size = best),
colour = "blue")
cou <- st_read("data/Countries Shapefile/ne_10m_admin_0_countries.shx")
ggplot(cou) +
geom_sf() +
geom_sf(data = head(ged171, 100),
mapping = aes(colour = best))
ggplot(cou) +
geom_sf() +
geom_sf(data = head(ged171, 100),
mapping = aes(size = log(best)))
cou <- st_read("data/Countries Shapefile/ne_10m_admin_0_countries.shx")
ggplot(cou) +
geom_sf() +
geom_sf(data = head(ged171, 100),
mapping = aes(colour = best))
colnames(ged171)
