ind_names <- fx_diamonds$ind_name
ind_names
geom = fxpGeom
geom
# I will add a preprocessing step of the data here later. This will make it
# possible to use the metadata and to specify several indicators for one
# dimension.
if(is(ind_names, "fxIndName"))
ind_names <- rlang::eval_tidy(ind_names@ind_name, data = indicator)
assertthat::assert_that(is.character(ind_names))
# We only need those indicator rows that are given in the aes_mapping.
indicator <- filter(indicator, ind_names %in% get_inds(aes_mapping))
ind_names <- ind_names[ind_names %in% get_inds(aes_mapping)]
p <- ggplot(data, aes_mapping)
# We only need those indicator rows that are given in the aes_mapping.
indicator <- filter(indicator, ind_names %in% tectr::get_inds(aes_mapping))
# We only need those indicator rows that are given in the aes_mapping.
indicator <- filter(indicator, ind_names %in% tectr:::get_inds(aes_mapping))
ind_names <- ind_names[ind_names %in% get_inds(aes_mapping)]
ind_names <- ind_names[ind_names %in% tectr:::get_inds(aes_mapping)]
ind_names
p <- ggplot(data, aes_mapping)
p
# At first, we get the single add-ons of every dimension:
for(nam in names(aes_mapping)) {
p <- fx_layer_single_ind(indicator, nam, aes_mapping[[nam]],
ind_names, geom = geom, ...)(p)
}
# At first, we get the single add-ons of every dimension:
for(nam in names(aes_mapping)) {
p <- tectr:::fx_layer_single_ind(indicator, nam, aes_mapping[[nam]],
ind_names, geom = geom, ...)(p)
}
# At first, we get the single add-ons of every dimension:
for(nam in names(aes_mapping)) {
p <- tectr:::fx_layer_single_ind(indicator, nam, aes_mapping[[nam]],
ind_names, geom = geom)(p)
}
p
# Then, we get the final layer(s) that are determined by the complete
# aes_mapping.
p <- fx_layer_complete_ind(indicator, aes_mapping,
ind_names, geom, ...)(p)
# Then, we get the final layer(s) that are determined by the complete
# aes_mapping.
p <- tectr:::fx_layer_complete_ind(indicator, aes_mapping,
ind_names, geom, ...)(p)
fx_ggplot(diamonds, fx_diamonds, aes(x = clarity), fx_diamonds$ind_name, geom = fxpGeom)
fx_ggplot(diamonds, fx_diamonds, aes(x = clarity), fx_diamonds$ind_name, geom = fxpGeom)
fx_ggplot(diamonds, fx_diamonds, aes(x = clarity), fx_diamonds$ind_name, geom = fxpGeom)
p
# Then, we get the final layer(s) that are determined by the complete
# aes_mapping.
p <- fx_layer_complete_ind(indicator, aes_mapping,
ind_names, geom = geom, ...)(p)
# Then, we get the final layer(s) that are determined by the complete
# aes_mapping.
p2 <- tectr:::fx_layer_complete_ind(indicator, aes_mapping,
ind_names, geom = geom, ...)(p)
# Then, we get the final layer(s) that are determined by the complete
# aes_mapping.
p2 <- tectr:::fx_layer_complete_ind(indicator, aes_mapping,
ind_names, geom = geom)(p)
p2
fx_layer_complete_ind
?fx_layer_complete_ind
mapping <- aes_mapping
fxps <- rlang::dots_list(geom = geom)
fxps
f <- function(gg) {
for(fx_name in names(fxps)) {
fx_args_tbl <- dplyr::tibble(fx = createFx(fxps[[fx_name]], indicator),
ind_name = ind_names) %>%
dplyr::inner_join(
dplyr::tibble(aes = names(mapping), ind_name = get_inds(mapping)),
by = "ind_name")
fx_args <- fx_args_tbl$fx
names(fx_args) <- fx_args_tbl$aes
gg <- def_fx_layer_complete_ind(fxName(fx = fx_name),
rlang::splice(fx_args))
}
}
f
f(p)
f <- function(gg) {
for(fx_name in names(fxps)) {
fx_args_tbl <- dplyr::tibble(fx = createFx(fxps[[fx_name]], indicator),
ind_name = ind_names) %>%
dplyr::inner_join(
dplyr::tibble(aes = names(mapping), ind_name = tectr:::get_inds(mapping)),
by = "ind_name")
fx_args <- fx_args_tbl$fx
names(fx_args) <- fx_args_tbl$aes
gg <- def_fx_layer_complete_ind(fxName(fx = fx_name),
rlang::splice(fx_args))
}
}
f(p)
f(p) -> tst
tst
gg <- p
fx_ggplot(diamonds, fx_diamonds, aes(x = clarity), fx_diamonds$ind_name, geom = fxpGeom)#
?def_fx_layer_complete_ind
?def_fx_layer_complete_ind
?def_fx_layer_complete_ind
library(tectr)
?def_fx_layer_complete_ind
gg
fx_name <- "geom"
fx_args_tbl <- dplyr::tibble(fx = createFx(fxps[[fx_name]], indicator),
ind_name = ind_names) %>%
dplyr::inner_join(
dplyr::tibble(aes = names(mapping), ind_name = get_inds(mapping)),
by = "ind_name")
fx_args_tbl <- dplyr::tibble(fx = createFx(fxps[[fx_name]], indicator),
ind_name = ind_names) %>%
dplyr::inner_join(
dplyr::tibble(aes = names(mapping), ind_name = tectr:::get_inds(mapping)),
by = "ind_name")
fx_args_tbl
fx_args <- fx_args_tbl$fx
names(fx_args) <- fx_args_tbl$aes
fx_args
def_fx_layer_complete_ind(fxName(fx = fx_name),
rlang::splice(fx_args))
rlang::splice(fx_args)
fx_ggplot(diamonds, fx_diamonds, aes(x = clarity), fx_diamonds$ind_name, geom = fxpGeom)#
fx_args
!!!fx_args
library(rlang)
!!!fx_args
?`!!!`
class(fx_args)
sloop::s4_methods_generic("def_fx_layer_complete_ind")
fx_args
tst <- def_fx_layer_complete_ind(fxName(fx = fx_name), !!!fx_args)
tst
def_fx_layer_complete_ind(fxName(fx = fx_name), x = createFx(fxps[["geom"]]))
def_fx_layer_complete_ind(fxName(fx = fx_name), x = createFx(fxps[["geom"]], indicator))
is(createFx(fxps[["geom"]], indicator))
def_fx_layer_complete_ind(fxName(fx = fx_name), x = createFx(fxps[["geom"]], indicator)[[1]])
fx_args <- fx_args_tbl$fx
names(fx_args) <- fx_args_tbl$aes
fx_args
print(!!!fx_args)
library(rlang)
list(!!!fx_args)
rlang::list2(!!!fx_args)
rlang::list2(!!!fx_args)
fx_ggplot(diamonds, fx_diamonds, aes(x = clarity), fx_diamonds$ind_name, geom = fxpGeom)#
f <- do.call("def_fx_layer_complete_ind",
rlang::list2(fx_name = fxName(fx = fx_name), !!!fx_args))
f
gg <- f(gg)
gg
p
fx_ggplot(diamonds, fx_diamonds, aes(x = clarity), fx_diamonds$ind_name, geom = fxpGeom)#
fx_ggplot(diamonds, fx_diamonds, aes(x = x), fx_diamonds$ind_name, geom = fxpGeom)#
?ggmosaic
?geom_mosaic
devtools::use_package("ggmosaic")
install.packages("ggmosaic")
?fx_layer_complete_ind
?fx_layer_complete_ind
?fx_layer_complete_ind
?fx_layer_single_ind
devtools::use_package("ggmosaic")
?geom_mosaic
gg
mapping(gg)
fx_ggplot(diamonds, fx_diamonds, aes(x = clarity, y = color), fx_diamonds$ind_name, geom = fxpGeom)#
?do.call
fx_ggplot(diamonds, fx_diamonds, aes(x = clarity, y = color), fx_diamonds$ind_name, geom = fxpGeom)#
?scale_colour_continuous
install.packages("ggridges")
devtools::use_package("ggridges")
?fx_layer_complete_ind
fx_ggplot(diamonds, fx_diamonds, aes(x = x, y = color), fx_diamonds$ind_name, geom = fxpGeom)#
fx_ggplot(diamonds, fx_diamonds, aes(x = x, y = color, fill = color), fx_diamonds$ind_name, geom = fxpGeom)#
fx_ggplot(diamonds, fx_diamonds, aes(x = x, y = y, fill = z), fx_diamonds$ind_name, geom = fxpGeom)#
fx_ggplot(diamonds, fx_diamonds, aes(x = x, y = y, fill = z), fx_diamonds$ind_name, geom = fxpGeom)#
fx_ggplot(diamonds, fx_diamonds, aes(x = x, y = y, color = z), fx_diamonds$ind_name, geom = fxpGeom)#
fx_ggplot(diamonds, fx_diamonds, aes(x = x, y = z, color = z), fx_diamonds$ind_name, geom = fxpGeom)
fx_ggplot(diamonds, fx_diamonds, aes(x = x, y = clarity, color = z), fx_diamonds$ind_name, geom = fxpGeom)
fx_ggplot(diamonds, fx_diamonds, aes(x = color, y = clarity), fx_diamonds$ind_name, geom = fxpGeom)
install.packages("roxygen2")
devtools::load_all()
fx_ggplot(diamonds, fx_diamonds, aes(x = color, y = clarity), fxIndName(ind_name = ind_name), fxpGeom_mtcars)
devtools::load_all(".")
fx_ggplot(diamonds, fx_diamonds, aes(x = color, y = clarity), fxIndName(ind_name = ind_name), fxpGeom_mtcars)
tectr:::get_inds(aes(x = color, y = clarity))
library(ggplot2)
fx_ggplot(diamonds, fx_diamonds, aes(x = color, y = clarity), fxIndName(ind_name = ind_name), fxpGeom_mtcars)
tectr:::get_inds(aes(x = color, y = clarity))
fx_diamonds
install.packages(c("broom", "caTools", "dbplyr", "english", "evaluate", "httpuv", "ipred", "iterators", "kernlab", "lava", "leaflet", "maptools", "mboost", "ModelMetrics", "openssl", "pls", "rgdal", "robustbase", "stringi", "textclean", "tinytex", "XML", "yaml"))
devtools::build()
library(tectr)
fx_ggplot(diamonds, fx_diamonds, aes(x = color, y = clarity), fx_diamonds$ind_name, geom = fxpGeom)
fxpGeom
data <- diamonds
library(ggplot2)
fx_ggplot(diamonds, fx_diamonds, aes(x = color, y = clarity), fx_diamonds$ind_name, geom = fxpGeom)
data <- diamonds
indicator <- fx_diamonds
aes_mapping <- aes(x = color, y = clarity)
ind_names <- fx_diamonds$ind_name
geom <- fxpGeom
assertthat::assert_that(is.character(ind_names))
# We only need those indicator rows that are given in the aes_mapping.
indicator <- filter(indicator, ind_names %in% get_inds(aes_mapping))
setInternet2(TRUE)
help("Defunct")
.Defunct("setInternet2")
defunct?base
traceback()
devtools::document()
traceback()
debug
debug()
debugonce(file)
devtools::document
devtools::document()
con
debugonce(file)
devtools::document()
con
con <- "c:/Users/samue/Documents/R/win-library/3.5/devtools/DESCRIPTION"
con
con <- "c:/Users/samue/Documents/R/win-library/3.5/devtools/DESCRIPTION"
con
file(con, "r")
?file
file(con, "r")
file(con, "r")$description
summary(file(con, "r"))
open(file(con, "r"))
devtools::document()
rm(con)
?document
as.package("tectr")
library(devtools)
as.package("tectr")
knitr::opts_chunk$set(echo = TRUE)
library(tectr)
fx_diamonds
fx_ggplot(diamonds, fx_diamonds, aes(x = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom)
fx_ggplot(diamonds, fx_diamonds, aes(x = x),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
traceback()
devtools::build()
knitr::opts_chunk$set(echo = TRUE)
library(tectr)
fx_diamonds
fx_ggplot(diamonds, fx_diamonds, aes(x = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom)
devtools::load_all
devtools::load_all()
fxIndName
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all()
fx_diamonds
fx_ggplot(diamonds, fx_diamonds, aes(x = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom)
library(ggplot2)
fx_ggplot(diamonds, fx_diamonds, aes(x = x),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(diamonds, fx_diamonds, aes(x = x, y = y),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(diamonds, fx_diamonds, aes(x = color, y = y),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(diamonds, fx_diamonds, aes(x = clarity, colour = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
nrow(diamonds)
fx_ggplot(diamonds, fx_diamonds, aes(x = clarity, fill = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(filter(diamonds, color %in% c("D", "G", "J")), fx_diamonds, aes(x = clarity, fill = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(dplyr::filter(diamonds, color %in% c("D", "G", "J")), fx_diamonds, aes(x = clarity, fill = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(dplyr::filter(diamonds, color %in% c("D", "G", "J"),
stringr::str_detect(clarity, coll("S"))),
fx_diamonds, aes(x = clarity, fill = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(dplyr::filter(diamonds, color %in% c("D", "G", "J"),
stringr::str_detect(clarity, stringr::coll("S"))),
fx_diamonds, aes(x = clarity, fill = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(dplyr::filter(diamonds, color %in% c("D", "G", "J"),
stringr::str_detect(clarity, stringr::coll("VS"))),
fx_diamonds, aes(x = clarity, fill = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(diamonds, fx_diamonds, aes(x = clarity, fill = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(dplyr::filter(diamonds, color %in% c("D", "G", "J"),
stringr::str_detect(clarity, stringr::coll("VS"))),
fx_diamonds, aes(x = clarity, fill = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_diamonds
fx_ggplot(diamonds, fx_diamonds, aes(x = clarity, fill = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(dplyr::filter(diamonds, color %in% c("D", "G", "J"),
stringr::str_detect(clarity, stringr::coll("VS"))),
fx_diamonds, aes(x = clarity, fill = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(diamonds, fx_diamonds, aes(x = depth, y = price, fill = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(dplyr::filter(diamonds, color %in% c("D", "G", "J"),
stringr::str_detect(clarity, stringr::coll("VS"))),
fx_diamonds, aes(x = clarity, fill = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(diamonds, fx_diamonds, aes(x = depth, y = price, colour = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(dplyr::filter(diamonds, color %in% c("D", "G", "J"),
stringr::str_detect(clarity, stringr::coll("VS")),
price >= 5000, price <= 10000),
fx_diamonds, aes(x = depth, y = price, fill = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(dplyr::filter(diamonds, color %in% c("D", "G", "J"),
stringr::str_detect(clarity, stringr::coll("VS")),
price >= 5000, price <= 10000),
fx_diamonds, aes(x = depth, y = price, colour = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(diamonds, fx_diamonds, aes(x = clarity, fill = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(dplyr::filter(diamonds, color %in% c("D", "G", "J"),
stringr::str_detect(clarity, stringr::coll("VS"))),
fx_diamonds, aes(x = clarity, fill = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(diamonds, fx_diamonds, aes(x = depth, y = price, colour = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
fx_ggplot(dplyr::filter(diamonds, color %in% c("D", "G", "J"),
stringr::str_detect(clarity, stringr::coll("VS")),
price >= 5000, price <= 10000),
fx_diamonds, aes(x = depth, y = price, colour = color),
fxIndName(ind_name = ind_name),
geom = fxpGeom,
description = fxpDescription(label = label))
?def_fx_layer_single_ind
indicator <- filter(fx_diamonds, ind_name %in% c("depth", "price", "color"))
indicator <- dplyr::filter(fx_diamonds, ind_name %in% c("depth", "price", "color"))
indicator
fxpGeom
fxGeom <- createFx(fxpGeom, indicator)
fxGeom
aesName(x)
aesName("x")
?def_fx_layer_single_ind
def_fx_layer_single_ind
?fx
fx
fxGeom
?fxGeom
?fxContinuousGeom
showMethod("def_fx_layer_single_ind", signature = c(aes_name = "xAesName", fx_name = "geomFxName", fx = "fxGeom"))
?showMethods
selectMethod("def_fx_layer_single_ind", signature = c(aes_name = "xAesName", fx_name = "geomFxName", fx = "fxGeom"))
fx_diamonds
indicator
selectMethod("def_fx_layer_single_ind", signature = c(aes_name = "xAesName", fx_name = "geomFxName", fx = "fxContinuousGeom"))
?def_fx_layer_complete_ind
selectMethod("def_fx_layer_complete_ind", signature = c(fx_name = "fxGeom", x = "fxContinuousGeom", y = "fxContinuousGeom"))
?fxName
selectMethod("def_fx_layer_complete_ind", signature = c(fx_name = "geomFxName", x = "fxContinuousGeom", y = "fxContinuousGeom"))
devtools::load_all()
?fx_ggplot
fx_diamonds
?geom_bar
library(ggplot2)
?geom_bar
package?ggplot2
library(devtools)
build()
library(tectr)
metaframe(name = "color")
metaframe
tectr::metaframe(name = "color")
tectr:::metaframe(name = "color")
library(tectr)
library(tectr)
library(tectr)
library(tectr)
metaframe(name = "color")
data.frame(name = "color")
?print
library(tectr)
metaframe(name = "color")
library(tectr)
diamonds
library(ggplot2)
diamonds
fx_diamonds
metaframe(diamonds) <- fx_diamonds
metaframe(diamonds) <- as_metaframe(fx_diamonds)
metaframe(diamonds) <- as_metaframe(fx_diamonds %>% mutate(name = ind_name))
library(tidyverse)
metaframe(diamonds) <- as_metaframe(fx_diamonds %>% mutate(name = ind_name))
diamonds
metaframe(diamonds)
class(metaframe(diamonds))
library(tectr)
metaframe(diamonds) <- as_metaframe(fx_diamonds %>% mutate(name = ind_name))
diamonds
metaframe(diamonds)
library(tectr)
devtools::use_testthat()
devtools::use_test("metaframe")
as_tibble(metaframe(diamonds))
as_tibble(metaframe(diamonds)) %>% class
library(devtools)
?expect_identical
data.frame(name = "column_name")
metaframe(name = "column_name")
?metaframe
library(tectr)
mf <- new_metaframe(name = "column_name", label = "Column Name")
mf
expect_identical(mf, structure(
data.frame(name = "column_name", label = "Column Name")
), class = c("metaframe", "data.frame"))
library(testthat)
expect_identical(mf, structure(
data.frame(name = "column_name", label = "Column Name")
), class = c("metaframe", "data.frame"))
library(tectr)
library(tectr)
covr::code_coverage()
covr::package_coverage()
package?covr
covr::report()
covr::report()
ggplot(diamonds, aes(x = x, y = y)) + geom_point()
ggplot(diamonds, aes(x = x, y = y)) + geom_point()
ggplot(diamonds, aes(x = x, y = y)) + geom_point() + scale_x_continuous(limits = NA)
ggplot(diamonds, aes(x = x, y = y)) + geom_point() + scale_x_continuous(limits = c(NA, NA))
fx_diamonds
unlist(list(c(1,2)))
unlist(c(1,2))
as_list(mf)
mf
rlang::as_list(mf)
rlang::as_list(mf) -> mf2
list(!!!mf2)
list(rlang::dots_splice(mf2))
?dots_splice
?invisible
?assert_that
mf
mf12
mf2
data.frame(rlang::dots_splice(mf2))
?devtools::use_package
devtools::use_package("data.tree", "Suggests")
install.packages("data.tree")
package?tidygraph
.aesName <- setClass("AesName", contains = "character")
.aesName("x")
.aesName("x") %>% length
rm(.aesName)
.aesName("x") %>% length
library(tectr)
class?AesName
