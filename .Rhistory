}
class(ret) <- c("Set", class(ret))
ret
}
Set_list(1, 0)
Set(1,0)
Set <- function(...) {
Set_list(list(...))
}
Set(1,0)
Set_list(list(1,0))
ret <- list()
lapply(ret, print)
lapply(ret, function(x) all.equal(x, 0))
Set_list <- function(list_inp) {
ret <- list()
for(inp in list_inp) {
# Check if the element has already been added.
if(length(ret) == 0 |
all(lapply(ret, FUN = function(x) {
!all.equal(x, inp)
})))
ret <- c(ret, list(inp))
}
class(ret) <- c("Set", class(ret))
ret
}
Set_list(list(1,0))
list_inp = list(1,0)
ret <- list()
for(inp in list_inp) {
# Check if the element has already been added.
if(length(ret) == 0 |
all(lapply(ret, FUN = function(x) {
!all.equal(x, inp)
})))
ret <- c(ret, list(inp))
}
for(inp in list_inp) print inp
for(inp in list_inp) print(inp)
inp <- 1
if(length(ret) == 0 |
all(lapply(ret, FUN = function(x) {
!all.equal(x, inp)
})))
ret <- c(ret, list(inp))
Set_list <- function(list_inp) {
ret <- list()
for(inp in list_inp) {
# Check if the element has already been added.
if(length(ret) == 0 |
all(sapply(ret, FUN = function(x) {
!all.equal(x, inp)
})))
ret <- c(ret, list(inp))
}
class(ret) <- c("Set", class(ret))
ret
}
Set_list(list(1,0))
View(Set)
length(ret) == 0 |
all(sapply(ret, FUN = function(x) {
!all.equal(x, inp)
}))
ret
inp
x
sapply(ret, FUN = function(x) {
!all.equal(x, inp)
})
Set_list <- function(list_inp) {
ret <- list()
for(inp in list_inp) {
# Check if the element has already been added.
if(length(ret) != 0 |
all(sapply(ret, FUN = function(x) {
!all.equal(x, inp)
})))
ret <- c(ret, list(inp))
}
class(ret) <- c("Set", class(ret))
ret
}
inp <- 0
length(ret) == 0 |
all(sapply(ret, FUN = function(x) {
!all.equal(x, inp)
}))
all(sapply(ret, FUN = function(x) {
!all.equal(x, inp)
}))
lapply(ret, print)
Set_list <- function(list_inp) {
ret <- list()
for(inp in list_inp) {
# Check if the element has already been added.
if(length(ret) == 0 |
all(sapply(ret, FUN = function(x) {
!all.equal(x, inp)
})))
ret[[length(ret) + 1]] <- inp
}
class(ret) <- c("Set", class(ret))
ret
}
Set(1,0)
ret <- list()
list_inp
inp <- 1
if(length(ret) == 0 |
all(sapply(ret, FUN = function(x) {
!all.equal(x, inp)
})))
ret[[length(ret) + 1]] <- inp
ret
inp <- 0
for(inp in list_inp) {
# Check if the element has already been added.
if(length(ret) == 0 |
all(sapply(ret, FUN = function(x) {
!all.equal(x, inp)
})))
ret[[length(ret) + 1]] <- inp
}
inp
if(length(ret) == 0 |
all(sapply(ret, FUN = function(x) {
!all.equal(x, inp)
})))
ret[[length(ret) + 1]] <- inp
ret
?`%in%`
Content("Intelligence") %in% list(Content("Intelligence"), 2, Content("uzwcjgh"))
`%el%` <- function(x, S) {
for(conts in S) {
if(all.equal(x, conts)) return(TRUE)
}
return(FALSE)
}
Content("Intelligence") %el% list(Content("Intelligence"), 2, Content("uzwcjgh"))
Set_list <- function(list_inp) {
ret <- list()
for(inp in list_inp) {
# Check if the element has already been added.
if(!(inp %el% ret))
ret[[length(ret) + 1]] <- inp
}
class(ret) <- c("Set", class(ret))
ret
}
Set(1,0)
ret <- list()
for(inp in list_inp) {
# Check if the element has already been added.
if(!(inp %el% ret))
ret[[length(ret) + 1]] <- inp
}
inp
inp %el% ret
ret
inp
inp %el% ret
x <- inp
S <- ret
for(conts in S) {
if(all.equal(x, conts)) return(TRUE)
}
conts
x
conts
all.equal(x, conts)
?all.equal
`%el%` <- function(x, S) {
for(conts in S) {
if(is.true(all.equal(x, conts))) return(TRUE)
}
return(FALSE)
}
inp %el% ret
?is_true
is_true(1)
rlang::is_true(1)
`%el%` <- function(x, S) {
for(conts in S) {
if(all.equal(x, conts) == TRUE) return(TRUE)
}
return(FALSE)
}
inp %el% ret
Set(1,0)
Set(Content("Intelligence"), Content("Arrogance"), Content("Intelligence"))
c(Content("Intelligence"), Content("Belligerence"))
?match
match_els <- function(x, S, nomatch = 0) {
for(in seq_len(length(S))) {
if(all.equal(x, S[[i]]) == TRUE) return(i)
}
return(nomatch)
}
match_els(Content("Intelligence"), list(Content("Intelligence"), 2, Content("uzwcjgh"))
)
match_els <- function(x, S, nomatch = 0) {
for(i in seq_len(length(S))) {
if(all.equal(x, S[[i]]) == TRUE) return(i)
}
return(nomatch)
}
match_els(Content("Intelligence"), list(Content("Intelligence"), 2, Content("uzwcjgh"))
)
ls()
rm(list = ls())
?rm
?append
rel <- Relation(c("contains", "predicts"))
rel <- C_Relation(c("contains", "predicts"))
rel <- C_Relation(c("contains", "predicts"), definition = c("", ""))
rel
rel[1]
class(rel)
class(rel[1])
class(NULL)
library(tectr)
Structure()
devtools::build()
devtools::document()
devtools::build()
devtools::reload()
Structure()
?Structure
devtools::document()
devtools::document()
devtools::reload()
devtools::build()
devtools::reload()
tectr()
library(tectr)
tectr()
?Structure
Structure(Content(character(0), character(0)))
getS3method(Structure)
?tectr
devtools::build()
devtools::reload()
tectr()
Structure(Content("Intelligence"))
?textInput
devtools::load_all(".")
tectr()
Structure(Content("Intelligence"))
?submitButton
library(shiny)
?selectInput
library(tidygraph)
package?tidygraph
?tbl_graph
tbl_graph(nodes = Content("Intelligence"))
library(tectr)
tbl_graph(nodes = Content("Intelligence"))
tbl_graph(nodes = Content("Intelligence")) -> tst
?Structure
tst$nodes
?tbl_graph
?activate
activate
getS3method("activate", "tbl_graph")
?quo_text
tst$relations <- Content("predicts")
tst
print.default(tst)
print.list(tst)
print.listof(tst)
tst
?wellPanel
install.packages("magrittr")
?activate
?plotOutput
library(devtools)
document()
document()
document()
document()
library(tectr)
tectr_structure()
kljkl
?actionButton
tst
tst %>% activate(nodes)
tst %>% activate(nodes) %>% print
names(tst)
class(tst) <- list
tst
help("get nodes", package = "tidygraph")
??get nodes
help("get nodes")
.N(tst)
tst <- Structure(Content("Intelligence"), Content("Predicts"), data.frame(from = 1, to = 1, name = "Predicts"))
?Structure
?verticalLayout
?wellPanel
source('C:/Users/samue/OneDrive/Studium/S Statistik/tectr/R/shiny-tectr_structure-server.R')
?eventReactive
??Structure
?Structure
append
Content(character(0))
Content("Intelligence")
rep("", 0)
get_ref_edges <- function(variables, relations, edges) {
if(!("name" %in% colnames(edges))) edges$name <- 0
else if(is.character(edges$name)) {
# get positions from names
edges$name <- match(edges$name, relations$name)
assert_that(edges$name)
}
if(any(edges$name == 0)) warning("There are edges without known relations")
for(varnames in c("from", "to")) {
if(is.numeric(edges$varnames))
assert_that(0 < min(edges$varnames),
max(edges$varnames) < length(variables))
else if(is.character(edges$varnames)) {
# get positions from names
edges$varnames <- match(edges$varnames, variables$name)
}
else error("varnames$", varnames, "needs to contain numbers or characters.")
}
}
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
get_ref_edges <- function(variables, relations, edges) {
if(!("name" %in% colnames(edges))) edges$name <- 0
else if(is.character(edges$name)) {
# get positions from names
edges$name <- match(edges$name, relations$name)
assert_that(edges$name)
}
else if(is.numeric(edges$name))
assert_that(0 <= min(edges$name),
max(edges$name) <= length(relations))
else stop("edges$name is available but neither character nor a number.")
if(any(edges$name == 0)) warning("There are edges without known relations")
for(varnames in c("from", "to")) {
if(is.numeric(edges$varnames))
assert_that(0 < min(edges$varnames),
max(edges$varnames) <= length(variables))
else if(is.character(edges$varnames)) {
# get positions from names
edges$varnames <- match(edges$varnames, variables$name)
}
else stop("varnames$", varnames, "needs to contain numbers or characters.")
}
edges
}
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
data.frame(from = "Intelligence", to = "Intelligence", name = "predicts")
data.frame(from = "Intelligence", to = "Intelligence", name = "predicts") -> tst
tst$name
get_ref_edges <- function(variables, relations, edges) {
if(!("name" %in% colnames(edges))) edges$name <- 0
else if(is.character(edges$name) | is.factor(edges$name)) {
# get positions from names
edges$name <- match(edges$name, relations$name)
assert_that(edges$name)
}
else if(is.numeric(edges$name))
assert_that(0 <= min(edges$name),
max(edges$name) <= length(relations))
else stop("edges$name is available but neither character nor a number.")
if(any(edges$name == 0)) warning("There are edges without known relations")
for(varnames in c("from", "to")) {
if(is.numeric(edges$varnames))
assert_that(0 < min(edges$varnames),
max(edges$varnames) <= length(variables))
else if(is.character(edges$varnames)) {
# get positions from names
edges$varnames <- match(edges$varnames, variables$name)
}
else stop("varnames$", varnames, "needs to contain numbers or characters.")
}
edges
}
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
library(assertthat)
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
get_ref_edges <- function(variables, relations, edges) {
if(!("name" %in% colnames(edges))) edges$name <- 0
else if(is.character(edges$name) | is.factor(edges$name)) {
# get positions from names
edges$name <- match(edges$name, relations$name)
assert_that(edges$name)
}
else if(!is.numeric(edges$name))
stop("edges$name is available but neither character nor a number.")
assert_that(0 <= min(edges$name),
max(edges$name) <= length(relations))
if(any(edges$name == 0)) warning("There are edges without known relations")
for(varnames in c("from", "to")) {
if(is.numeric(edges$varnames))
assert_that(0 < min(edges$varnames),
max(edges$varnames) <= length(variables))
else if(is.character(edges$varnames)) {
# get positions from names
edges$varnames <- match(edges$varnames, variables$name)
}
else stop("varnames$", varnames, "needs to contain numbers or characters.")
}
edges
}
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
get_ref_edges <- function(variables, relations, edges) {
if(!("name" %in% colnames(edges))) edges$name <- 0
else if(is.character(edges$name) | is.factor(edges$name)) {
# get positions from names
edges$name <- match(edges$name, relations$name)
}
else if(!is.numeric(edges$name))
stop("edges$name is available but neither character nor a number.")
assert_that(0 <= min(edges$name),
max(edges$name) <= length(relations))
if(any(edges$name == 0)) warning("There are edges without known relations")
for(varnames in c("from", "to")) {
if(is.numeric(edges$varnames))
assert_that(0 < min(edges$varnames),
max(edges$varnames) <= length(variables))
else if(is.character(edges$varnames)) {
# get positions from names
edges$varnames <- match(edges$varnames, variables$name)
}
else stop("varnames$", varnames, "needs to contain numbers or characters.")
}
edges
}
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
get_ref_edges <- function(variables, relations, edges) {
if(!("name" %in% colnames(edges))) edges$name <- 0
else if(is.character(edges$name) | is.factor(edges$name)) {
# get positions from names
edges$name <- match(edges$name, relations$name)
}
else if(!is.numeric(edges$name))
stop("edges$name is available but neither character nor a number.")
assert_that(0 <= min(edges$name),
max(edges$name) <= length(relations))
if(any(edges$name == 0)) warning("There are edges without known relations")
for(varnames in c("from", "to")) {
if(is.numeric(edges$varnames))
assert_that(0 < min(edges$varnames),
max(edges$varnames) <= length(variables))
else if(is.character(edges$varnames)) {
# get positions from names
edges$varnames <- match(edges$varnames, variables$name)
}
else stop("varnames$", varnames, "needs to contain numbers or characters.")
}
edges
}
get_ref_edges <- function(variables, relations, edges) {
if(!("name" %in% colnames(edges))) edges$name <- 0
else if(is.character(edges$name) | is.factor(edges$name)) {
# get positions from names
edges$name <- match(edges$name, relations$name)
}
else if(!is.numeric(edges$name))
stop("edges$name is available but neither character nor a number.")
assert_that(0 <= min(edges$name),
max(edges$name) <= length(relations))
if(any(edges$name == 0)) warning("There are edges without known relations")
for(varnames in c("from", "to")) {
if(is.numeric(edges$varnames))
assert_that(0 < min(edges$varnames),
max(edges$varnames) <= length(variables))
else if(is.character(edges$varnames) | is.factor(edges$varnames)) {
# get positions from names
edges$varnames <- match(edges$varnames, variables$name)
}
else stop("varnames$", varnames, " needs to contain numbers or characters.")
}
edges
}
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
tst
tst$from
tst$from %>% is.factor
get_ref_edges <- function(variables, relations, edges) {
if(!("name" %in% colnames(edges))) edges$name <- 0
else if(is.character(edges$name) | is.factor(edges$name)) {
# get positions from names
edges$name <- match(edges$name, relations$name)
}
else if(!is.numeric(edges$name))
stop("edges$name is available but neither character nor a number.")
assert_that(0 <= min(edges$name),
max(edges$name) <= length(relations))
if(any(edges$name == 0)) warning("There are edges without known relations")
for(varnames in c("from", "to")) {
if(is.numeric(edges$varnames))
assert_that(0 < min(edges$varnames),
max(edges$varnames) <= length(variables))
else if(is.character(edges$varnames) | is.factor(edges$varnames)) {
# get positions from names
edges$varnames <- match(edges$varnames, variables$name)
}
else stop("varnames$", varnames, " needs to contain numbers or characters.")
}
edges
}
tst$from %>% is.factor
get_ref_edges(variables = Content("Intelligence"), relations = Content("predicts"), edges = data.frame(from = "Intelligence", to = "Intelligence", name = "predicts"))
document()
library(tectr)
visualize_struct
