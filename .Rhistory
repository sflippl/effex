devtools::use_package("data.tree", "Suggests")
install.packages("data.tree")
package?tidygraph
.aesName <- setClass("AesName", contains = "character")
.aesName("x")
.aesName("x") %>% length
rm(.aesName)
.aesName("x") %>% length
library(tectr)
class?AesName
library(tectr)
tst
library(vdem.tectr)
library(tidyverse)
tbl <- tbl_categories %>% rename(name = inner_ind_name) %>% group_by(part_num, chapter_num, name)
names(tbl_categories)
tst <- fx_write_doc(tbl, "inst/extdata/tmp", main = c("responses", "answer_type", "citation", "notes", "question"), other = c("aggregation", "clarification", "cpp_tag", "cross_coder_aggregation", "data_release", "historical_clarification", "ordering", "project_manager", "scale", "sources"))
tst <- fx_write_doc(tbl, "inst/extdata/tmp", main = c("responses", "answer_type", "citation", "notes", "question"), other = c("aggregation", "clarification", "cpp_tag", "cross_coder_aggregation", "data_release", "historical_clarification", "ordering", "project_manager", "scale", "sources")) %>% as_metaframe
?as_metaframe
tst <- fx_write_doc(tbl, "inst/extdata/tmp", main = c("responses", "answer_type", "citation", "notes", "question"), other = c("aggregation", "clarification", "cpp_tag", "cross_coder_aggregation", "data_release", "historical_clarification", "ordering", "project_manager", "scale", "sources") %>% as_metaframe)
tst <- fx_write_doc(as_metaframe(tbl), "inst/extdata/tmp", main = c("responses", "answer_type", "citation", "notes", "question"), other = c("aggregation", "clarification", "cpp_tag", "cross_coder_aggregation", "data_release", "historical_clarification", "ordering", "project_manager", "scale", "sources"))
library(tectr)
tst <- fx_write_doc(as_metaframe(tbl), "inst/extdata/tmp", main = c("responses", "answer_type", "citation", "notes", "question"), other = c("aggregation", "clarification", "cpp_tag", "cross_coder_aggregation", "data_release", "historical_clarification", "ordering", "project_manager", "scale", "sources"))
library(tectr)
tst <- fx_write_doc(as_metaframe(tbl), "inst/extdata/tmp", main = c("responses", "answer_type", "citation", "notes", "question"), other = c("aggregation", "clarification", "cpp_tag", "cross_coder_aggregation", "data_release", "historical_clarification", "ordering", "project_manager", "scale", "sources"))
tst <- fx_write_doc(as_metaframe(tbl), "inst/extdata/tmp", main = c("responses", "answer_type", "citation", "notes", "question"), other = c("aggregation", "clarification", "cpp_tag", "cross_coder_aggregation", "data_release", "historical_clarification", "ordering", "project_manager", "scale", "sources"))
tst
head(tst)
fx_doc(head(tst), everything())
fx_doc(head(tst) %>% as_metaframe(), everything())
tectr:::df_doc(head(tst) %>% as_metaframe(), everything())
data <- tst
# Get the columns of interest
fields <- expand_fields(data)
# Get the columns of interest
fields <- tectr::expand_fields(data)
# Get the columns of interest
fields <- tectr:::expand_fields(data)
selected_fields <- dplyr::inner_join(
tidyselect::vars_select(fields$field, ...) %>% tibble(field = .),
fields,
by = "field")
data <- select(data, name, !!selected_fields$col) %>%
filter(name %in% names) %>%
expand_data
selected_fields <- dplyr::inner_join(
tidyselect::vars_select(fields$field, everything()) %>% tibble(field = .),
fields,
by = "field")
data <- select(data, name, !!selected_fields$col) %>%
filter(name %in% names) %>%
expand_data
names
names <- data$name
data <- select(data, name, !!selected_fields$col) %>%
filter(name %in% names) %>%
expand_data
data <- select(data, name, !!selected_fields$col) %>%
filter(name %in% names) %>%
tectr:::expand_data
data <- select(data, name, !!selected_fields$col) %>%
filter(name %in% names) %>%
tectr:::expand_data()
data <- select(data, name, !!selected_fields$col) %>%
filter(name %in% names)
filepaths <- names(data)[purrr::map_lgl(data, is_filepath)]
filepaths
res <- purrr::map(
filepaths,
function(nam) {
res <- read_filepath(data[[nam]])
names(res) <- if_else(
names(res) == "name", names(res), paste0("fxDesc_", names(res))
)
res
}
)
read_filepath(data[["main"]])
reader(data[["main"]])
jsonlite::read_json(data[["main"]][[1]])
reader(data[["main"]]) <- function(file, ...)
jsonlite::read_json(file, simplifyDataFrame = TRUE)
attr(data[["main"]], "reader") <- function(file, ...)
jsonlite::read_json(file, simplifyDataFrame = TRUE)
attr(data[["other"]], "reader") <- function(file, ...)
jsonlite::read_json(file, simplifyDataFrame = TRUE)
data <- select(data, name, !!selected_fields$col) %>%
filter(name %in% names) %>%
tectr:::expand_data
data <- select(data, name, !!selected_fields$col) %>%
filter(name %in% names) %>%
tectr:::expand_data()
filepaths <- names(data)[purrr::map_lgl(data, is_filepath)]
res <- purrr::map(
filepaths,
function(nam) {
res <- read_filepath(data[[nam]])
names(res) <- if_else(
names(res) == "name", names(res), paste0("fxDesc_", names(res))
)
res
}
)
read_filepath(data[["main"]][[1]])
data[["main"]]
data[["main"]][1]
read_filepath(data[["main"]][1])
traceback()
reader(data[["main"]])
reader(data[["main"]])(data[["main"]]) -> tst
reader(data[["main"]])(file = data[["main"]]) -> tst3
reader(data[["main"]])(file = data[["main"]][1]) -> tst3
tst3
class(tst3)
unique(data[["main"]])
purrr:map_dfr(data[["main"]], ~jsonlite::read_json(file = ., simplifyDataFrame = TRUE))
purrr::map_dfr(data[["main"]], ~jsonlite::read_json(file = ., simplifyDataFrame = TRUE))
traceback()
?read_json
library(tectr)
tst2 <- tectr:::df_doc(tst, everything())
?expand_data
expand_data(tst)
tectr:::expand_data(tst)
filepaths <- names(data)[purrr::map_lgl(data, is_filepath)]
filepaths
res <- purrr::map(
filepaths, ~ read_filepath(data[[.]])
)
tst3 <- read_filepath(data[["main"]])
reader(data[["main"]])(data[["main"]][1])
purrr::map_dfr(unique(data[["main"]]), ~ reader(data[["main"]])(path = .))
purrr::map_dfr(unique(data[["main"]]), ~ reader(data[["main"]])(file = .))
reader(data[["main"]])
sort(table(data[["main"]]), decr = T)
sort(table(data[["main"]]), decr = T) %>% head
purrr::map_dfr(unique(data[["main"]]), ~ reader(data[["main"]])(file = .))
purrr::map(unique(data[["main"]]), ~ reader(data[["main"]])(file = .)) -> tst3
tst3
bind_rows(!!!tst23)
bind_rows(!!!tst3)
bind_rows(splice(tst3))
rbind(!!!tst3)
rbind(splice(tst3))
purrr::map(unique(data[["other"]]), ~ reader(data[["main"]])(file = .)) -> tst3
tst3
purrr::map_dfr(unique(data[["other"]]), ~ reader(data[["main"]])(file = .)) -> tst3
tst3
as_tibble(tst3)
purrr::map_dfr(unique(data[["main"]]), ~ reader(data[["main"]])(file = .)) -> tst3
class(data[["main"]])
reader(data[["main"]])
reader(data[["other"]])
attr(data[["main"]], "reader") <- function(file, ...) jsonlite::read_json(file, simplifyDataFrame = TRUE) %>% as_tibble()
purrr::map_dfr(unique(data[["main"]]), ~ reader(data[["main"]])(file = .)) -> tst3
i
purrr::map_dfr(unique(data[["main"]]), ~ reader(data[["main"]])(file = .)) -> tst3
x
reader(data[["main"]])(data[["main"]][1])
data[["main"]][1]
tbl
fromJSON(toJSON(tbl))
library(jsonlite)
tst4 <- fromJSON(toJSON(tbl))
as_tibble(tst4)
tst4$responses[[1]]
tbl2 <- mutate(tbl, responses = purrr::map(responses, function(x)
if(is.null(x)) return(character(0))
else return(x)
)
)
tbl2
tst4 <- fromJSON(toJSON(tbl))
tst4
as_tibble(tst4)
toJSON(head(tbl2))
toJSON(head(tbl2, 1), pretty =TRUE)
toJSON(head(tbl, 1), pretty =TRUE)
toJSON(head(tbl2, 1), pretty =TRUE)
toJSON(NULL)
?toJSON
toJSON(head(tbl, 1), pretty =TRUE, null = "null")
library(tectr)
tst <- fx_write_doc(as_metaframe(tbl), "inst/extdata/tmp", main = c("responses", "answer_type", "citation", "notes", "question"), other = c("aggregation", "clarification", "cpp_tag", "cross_coder_aggregation", "data_release", "historical_clarification", "ordering", "project_manager", "scale", "sources"))
tst <- fx_write_doc(as_metaframe(tbl), "inst/extdata/tmp", main = c("responses", "answer_type", "citation", "notes", "question"), other = c("aggregation", "clarification", "cpp_tag", "cross_coder_aggregation", "data_release", "historical_clarification", "ordering", "project_manager", "scale", "sources"))
tst
tectr:::expand_data(tst)
?fromJSON
library(tectr)
tst <- fx_write_doc(as_metaframe(tbl), "inst/extdata/tmp", main = c("responses", "answer_type", "citation", "notes", "question"), other = c("aggregation", "clarification", "cpp_tag", "cross_coder_aggregation", "data_release", "historical_clarification", "ordering", "project_manager", "scale", "sources"))
tst <- fx_write_doc(as_metaframe(tbl), "inst/extdata/tmp", main = c("responses", "answer_type", "citation", "notes", "question"), other = c("aggregation", "clarification", "cpp_tag", "cross_coder_aggregation", "data_release", "historical_clarification", "ordering", "project_manager", "scale", "sources"))
tst
tectr:::expand_data(tst) -> tst2
library(tectr)
tst <- fx_write_doc(as_metaframe(tbl), "inst/extdata/tmp", main = c("responses", "answer_type", "citation", "notes", "question"), other = c("aggregation", "clarification", "cpp_tag", "cross_coder_aggregation", "data_release", "historical_clarification", "ordering", "project_manager", "scale", "sources"))
tst <- fx_write_doc(as_metaframe(tbl), "inst/extdata/tmp", main = c("responses", "answer_type", "citation", "notes", "question"), other = c("aggregation", "clarification", "cpp_tag", "cross_coder_aggregation", "data_release", "historical_clarification", "ordering", "project_manager", "scale", "sources"))
tst
tst2 <- tectr:::expand_data(tst)
tst2
tbl
tbl <- ungroup(tbl)
all.equal(tst2, tbl)
?toJSON
serializeJSON(head(tbl, 1))
tbl
?serializeJSON
tmpfile()
?tmpfile
??tmpfile
tempfile()
tempfile()
tempfile()
write_params = list(
pretty = TRUE,
null = "null"
)
path = "tst.json"
?write_json
read_json
x = 1
write_json(x, path, splice(write_params))
traceback()
write_json(x, path, !!!write_params)
write_json(x, path, splice(write_params))
write_json(x, path, pretty = TRUE, null = "null")
?do.call
do.call("write_json", c(list(x = x, path = path), write_params), envir = "namespace:jsonlite")
?asNamespace()
do.call("write_json", c(list(x = x, path = path), write_params), envir = asNamespace("jsonlite"))
library(tectr)
?toJSON
?fx_write
use_test("fx-fun-write-json")
library(devtools)
use_test("fx-fun-write-json")
library(tectr)
flp <- new_filepath(system.file("tests", "testthat", "tectr.json",
package = "tectr"),
c("description", "notes"),
reader = function(file, ...)
jsonlite::read_json(file, simplifyDataFrame = TRUE) %>%
dplyr::as_tibble(.)
)
expect_true(is_filepath(flp))
expect_equal(fields(flp), c("description", "notes"))
library(testthat)
expect_equal(fields(flp), c("description", "notes"))
expect_equal(reader(flp),
function(file, ...)
jsonlite::read_json(file, simplifyDataFrame = TRUE) %>%
dplyr::as_tibble(.))
tectr_df <- dplyr::tibble(description = "A package.", notes = "Some notes")
tectr_df
tst <- read_filepath(flp)
reader(flp)
flp
system.file("tests", "testthat", "tectr.json")
system.file("tests", "testthat", "tectr.json", package = "tectr")
?system.file
library(tectr)
library(tectr)
system.file("tests", "testthat", "tectr.json",
package = "tectr")
?read_filepath
data <- tibble(high_level = c(rep(1, 5), rep(2, 5)), low_level = 1:10,
chars = "a")
path <- "dummy/path"
json_file_data(data, path, list())
tectr:::json_file_data(data, path, list())
tectr:::json_file_data(data, path, list(main = "char"))
data
unite(data, "tst")
unite(data, -everything(), "tst")
unite(data, "tst", -everything())
library(tectr)
data <- dplyr::tibble(high_level = c(rep(1, 5), rep(2, 5)), low_level = 1:10,
chars = "a")
path <- "dummy/path"
tectr:::json_file_data(data, path, list(main = "char"))
library(tectr)
tectr:::json_file_data(data, path, list(main = "char"))
file_data <- json_file_data(dplyr::group_by(data, high_level), path)
file_data <- tectr:::json_file_data(dplyr::group_by(data, high_level), path)
file_data
nest(file_data)
library(tectr)
path <- tempfile()
r
data <- dplyr::tibble(high_level = c(rep(1, 5), rep(2, 5)), low_level = 1:10,
chars = "a")
path
fx_write_json(data, path)
fx_write_json(data, path, chars = "chars")
data <- dplyr::tibble(high_level = c(rep(1, 5), rep(2, 5)), name = 1:10,
chars = "a")
fx_write_json(data, path, chars = "chars")
path
path <- paste0(tempfile(), "/new")
path
fx_write_json(data, path, chars = "chars")
fx_write_json(data, path, chars = "chars")
path <- tempfile()
library(tectr)
fx_write_json(data, path, chars = "chars")
path <- tempfile()
fx_write_json(data, path, chars = "chars")
path <- tempfile()
library(tectr)
fx_write_json(data, path, chars = "chars")
path
library(tectr)
path <- tempfile()
fx_write_json(data, path, chars = "chars")
library(tectr)
path <- tempfile()
fx_write_json(data, path, chars = "chars")
read_filepath(data$chars)
data$chars
data[["chars"]]
data[["chars"]] %>% class
fx_write_json(data, path, chars = "chars") -> tst
path <- tempfile()
fx_write_json(data, path, chars = "chars") -> tst
read_filepath(tst[["chars"]])
data
path <- tempfile()
written_data <- fx_write_json(dplyr::group_by(data, high_level), path)
read_filepath(written_data$chars)
written_data
path <- tempfile()
written_data <- fx_write_json(dplyr::group_by(data, high_level), path, chars = "chars")
read_filepath(written_data$chars)
library(tectr)
library(tectr)
covr::report()
flp <- new_filepath("tectr.json",
c("description", "notes"),
reader = function(file, ...)
jsonlite::read_json(file, simplifyDataFrame = TRUE) %>%
dplyr::as_tibble(.)
)
flp2 <- flp
flp2
attributes(flp2)
?attributes
library(tectr)
covr::report()
filepath_cols <- names(data)[purrr::map_lgl(data, is_filepath)]
data
path <- tempfile()
written_data <- fx_write_json(dplyr::group_by(data, high_level, low_level),
path, chars = c("chars", "low_level"))
data <- dplyr::tibble(high_level = c(rep(1, 5), rep(2, 5)),
low_level = 1:10,
name = 1:10,
chars = "a")
path <- tempfile()
written_data <- fx_write_json(dplyr::group_by(data, high_level, low_level),
path, chars = c("chars", "low_level"))
data <- written_data
data
filepath_cols <- names(data)[purrr::map_lgl(data, is_filepath)]
filepath_cols
data_unaff <- dplyr::select(data, -!!filepath_cols)
data_unaff
data_aff <- dplyr::select(data, !!filepath_cols)
data_aff
res <- purrr::map(data_aff, read_filepath)
res
res <- c(list(data_unaff), purrr::map(data_aff, read_filepath))
res
ret <- purrr::reduce(res, ~ dplyr::inner_join(.x, .y, by = "name"))
ret
library(tectr)
covr::report()
?fx_read
library(tectr)
?fx_red
?fx_read
structure(NULL, class = "fxGeom_class")
structure(list(), class = "fxGeom_class")
?system.file
tbl <- tibble(a = 1:3)
library(dplyr)
tbl <- tibble(a = 1:3)
mutate(tbl, b = NULL)
mutate(tbl, a = NULL)
rm(tbl)
devtools::use_test("fx-fun-infer")
?next
?fxint_layer_complete
structure(list(), class = ".fxInfer")
structure(list(), class = "1fxInfer")
structure(list(), class = " fxInfer")
FxInfer <- structure(list(), class = c("fxGeom_classFxInfer", "FxInfer"))
FxInfer
subclass <- class(FxInfer) %>% stringr::str_subset("\\S+FxInfer$") %>%
stringr::str_extract("\\S+(?=FxInfer$)")
subclass
devtools::use_test("fx-obj-infer")
library(tectr)
?fxInfer
?new_FxInfer
library(tectr)
{}
{1}
{1, ""}
{1, "a"}
?`{`
{1; "a"}
(1; a)
(1, 2)
?get
library(tectr)
?UseMethod
devtools::use_test("fx-fun-infer")
metaframe(data.frame())
library(tectr)
?fx_infer
fxext_infer(data.frame(), new_FxInfer(), mustWork = FALSE)
tectr:::fxext_infer(data.frame(), new_FxInfer(), mustWork = FALSE)
new_FxInfer()
library(tectr)
tectr:::fxext_infer(data.frame(), new_FxInfer(), mustWork = FALSE)
fxext_infer.FxInfer <- function(data, col, ..., mustWork = TRUE) {
if(mustWork) {
stop("No inference function defined for column name ", subclass(col))
}
NULL
}
tectr:::fxext_infer(data.frame(), new_FxInfer(), mustWork = FALSE)
library(tectr)
?new_FxInfer
library(tectr)
new_metaframe()
new_metaframe(name = character(0))
library(tectr)
class?fxGeomContinuous
is.numeric(factor())
is.numeric(factor("a"))
sf::st_sf()
sf::st_sf(geometry = st_sfc())
library(sf)
sf::st_sf(geometry = st_sfc())
sf::st_sf(geometry = st_sfc())$geometry %>% class
sf::st_sf(geometry = st_sfc(), a = character())$geometry %>% class
sf::st_sf(geometry = st_sfc(), a = character())$a %>% class
class?sfc
?sfc
?fxGeom
fxGeom(geom_class = "spatial")
fxGeom(geom_class = "Spatial")
class?fxGeomSpatial
class?fxGeom
fxGeom
fxGeom()
?is_sfc
?sf::st_sfc
?require
devtools::use_package("sf", "Suggests")
?st_is
??st_is
sf::st_is_valid(1)
is.numeric(NULL)
is.factor(NULL)
inherits(NULL, "sfc")
devtools::use_test("fx-fun-infer-fxGeom")
?st_sfc
?sfg
?st_sfg
??sfg
df <- dplyr::tibble(
Cont = 1:10,
Disc = LETTERS[1:10],
Disc2 = factor(LETTERS[1:10]),
List = as.list(1:10),
Spat = sf::st_sfc(rep(list(NULL), 10))
)
df
library(tectr)
library(tectr)
df <- dplyr::tibble(
Cont = 1:10,
Disc = LETTERS[1:10],
Disc2 = factor(LETTERS[1:10]),
List = as.list(1:10),
Spat = sf::st_sfc(rep(list(NULL), 10))
)
mf <- new_metaframe(name = c(names(df), "no_column"))
metaframe(df) <- mf
fx_infer(df)
fx_infer(df, columns = "fxGeom_class")
df
fx_infer(df, columns = "fxGeom_class") %>% metaframe
cls
df <- dplyr::tibble(
Cont = 1:10,
Disc = LETTERS[1:10],
Disc2 = factor(LETTERS[1:10]),
List = as.list(1:10),
Spat = sf::st_sfc(rep(list(NULL), 10))
)
mf <- new_metaframe(name = c(names(df), "no_column"))
cls <- fx_infer_fxGeom_class(df, mf)
mf
cls
dplyr::mutate(mf, fxGeom_class = cls)
dplyr::mutate(mf, fxGeom_class = cls) %>% class
fx_infer(df, columns = "fxGeom_class") %>% metaframe
metaframe(df) <- mf
fx_infer(df, columns = "fxGeom_class") %>% metaframe
fx_infer(df, columns = "fxGeom_class") %>% metaframe %>% class
