x
x$df_key
pillar_shaft(x$df_key)
pillar_shaft(x$df_key) -> tst
tst
pillar_shaft(x[, "df_key"]) -> tst
tst
x$df_key
library(tectr)
pillar_shaft(x[, "df_key"]) -> tst
tst
x$df_key
pillar_shaft(x$df_key) -> tst
tst
x
print.tibble
sloop::s3_dispatch(print(x))
print.tbl_df
tibble::print.tbl_df
tibble:::print.tbl_df
format.tbl_df
tibble:::format.tbl_df()
tibble:::format.tbl_df(
tibble:::format.tbl_df
tibble:::trunc_mat
tibble(a = 1:10, b = as.list(1:10), c = structure(1:10, class = "some"))
library(tibble)
tibble(a = 1:10, b = as.list(1:10), c = structure(1:10, class = "some"))
tibble(a = 1:10, b = as.list(1:10), c = structure(1:10, class = "int"))
tibble(a = 1:10, b = as.list(1:10), c = structure(1:10, class = "some"))
tst <- structure(1:10, class = "some")
class(tst)
tst
tibble(c = tst)
tibble(c = tst)$c
class(tst)
type_sum.some <- function(x) "some"
tibble(c = tst)
devtools::use_package("pillar")
library(tectr)
library(tibble)
data <- tibble(
venue = "rstudio::conf",
year  = 2017:2019,
loc   = latlon(
c(28.3411783, 32.7102978, NA),
c(-81.5480348, -117.1704058, NA)
),
paths = list(
loc[1],
c(loc[1], loc[2]),
loc[2]
)
)
data
library(tibble)
data <- tibble(
venue = "rstudio::conf",
year  = 2017:2019,
loc   = structrue(1:3, class = "latlon"),
paths = list(
loc[1],
c(loc[1], loc[2]),
loc[2]
)
)
library(tibble)
data <- tibble(
venue = "rstudio::conf",
year  = 2017:2019,
loc   = structure(1:3, class = "latlon"),
paths = list(
loc[1],
c(loc[1], loc[2]),
loc[2]
)
)
data
library(tibble)
data <- tibble(
venue = "rstudio::conf",
year  = 2017:2019,
loc   = structure(1:3, class = "latlong"),
paths = list(
loc[1],
c(loc[1], loc[2]),
loc[2]
)
)
data
library(tectr)
library(tibble)
data <- tibble(
venue = "rstudio::conf",
year  = 2017:2019,
loc   = structure(1:3, class = "latlong"),
paths = list(
loc[1],
c(loc[1], loc[2]),
loc[2]
)
)
data
library(tibble)
data <- tibble(
venue = "rstudio::conf",
year  = 2017:2019,
loc   = latlon(
c(28.3411783, 32.7102978, NA),
c(-81.5480348, -117.1704058, NA)
),
paths = list(
loc[1],
c(loc[1], loc[2]),
loc[2]
)
)
data
data$paths
library(tectr)
new_int <- function(x) {
structure(x, class = "nint")
}
rm(new_int)
library(tectr)
tibble(a = new_int(1))
library(tectr)
tibble(a = new_int(1))
tibble(a = nint(1))
tibble(a = nint(1))
library(tectr)
tibble(a = nint(1))
library(tectr)
tibble(a = nint(1))
nint(1)
library(tectr)
tibble(a = nint(1))
library(tectr)
tibble(a = nint(1))
tibble(a = nint(1))
library(tectr)
tibble(a = nint(1))
library(tectr)
tibble(a = nint(1))
library(tectr)
tibble(a = nint(1))
library(tectr)
tibble(a = nint(1))
tibble(a = new_int(1))
library(tectr)
?`[`
variables(cl)
library(tectr)
variables(cl)
tibble(a = new_key("a"))
tibble(a = new_key())
variable()
bind_rows(variable(), variable())
x
traceback()
new_key("a")
format(new_key("a"))
pillar_shaft(new_key("a"))
format(new_key("a"), width = 1)
format(new_key("a"), width = 5)
format(new_key("a"), width = 2)
format(new_key("a"), width = 0)
tibble(a = new_key(NULL))
tibble(a = list(new_key(NULL)))
new_key(NULL)
new_key("a")
new_key(c("a", "b"))
tibble(a = new_key(NULL))
pillar_shaft(new_key(NULL))
traceback()
library(tectr)
tibble(a = new_key(NULL))
tibble(a = new_key(NULL, c("a", "b")))
new_key(NULL, c("a", "b"))[c(1,1,2)]
tibble(a = new_key(NULL, c("a", "b")))
library(tectr)
tibble(a = new_key(NULL, c("a", "b")))
?pillar_shaft
traceback()
getMethod("print", "tbl_df")
?get
getS3method("print", "tbl_df")
?cat_line
library(cli)
cat_line(format(x))
format(x)
sloop::s3_dispatch(format(x))
x <- new_key(NULL, "a")
x
format(x)
cat_line(format(x))
cat_line(format(x), width =2)
traceback()
cl
cat_line(format(x, width =2))
cat_line(format(x, width =10))
x <- variable()
x
x <- tibble(a = new_key("a"))
x
traceback()
getS3Method("print", "tbl_df")
getS3Method("print", "tbl_df")
getS3method("print", "tbl_df")
cat_line(format(x))
getS3method("format", "tbl_df")
trunc_mat(x)
getS3method("trunc_mat", "tbl_df")
?getS3method
dplyr:::trunc_mat.tbl_df
dplyr:::trunc_mat
?trunc_mat
tibble:::trunc_mat.tbl_df
tibble:::trunc_mat
rows <- nrow(x)
rows
n <- rows
format(x)
df <- as.data.frame(head(x,n))
df
shrunk <- shrink_mat(df, rows, n)
shrunk <- tibble:::shrink_mat(df, rows, n)
shrunk <- tibble:::shrink_mat(df, rows, n, star = FALSE)
shrunk
trunc_info <- list(width = width, rows_total = rows, rows_min = nrow(df),
n_extra = n_extra, summary = tbl_sum(x))
trunc_info <- list(width = 10, rows_total = rows, rows_min = nrow(df),
n_extra = n_extra, summary = tbl_sum(x))
trunc_info <- list(width = 10, rows_total = rows, rows_min = nrow(df),
n_extra = 6, summary = tbl_sum(x))
trunc_info
structure(c(shrunk, trunc_info), class = c(paste0("trunc_mat_",
class(x)), "trunc_mat"))
shrunk
tibble:::shrink_mat
needs_dots <- (rows > n)
needs_dots
rows_missing <- 0L
star <- FALSE
mcf <- pillar::colonnade(df, has_row_id = if (star)
"*"
else TRUE, needs_dots = needs_dots)
mcf
pillar::colonnade
proxy <- structure(df, needs_dots = FALSE)
proxy
ret <- structure(proxy, class = "colonnade")
ret
set_width(ret, width)
ret <- set_width(ret, width)
pillar:::set_width(ret, width)
?set_width
pillar:::set_width(ret, 10)
ret
structure
ret
proxy
class(proxy)
structure(proxy, class = "colonnade")
structure(data.frame(a = 1, class = "colonnade"))
structure(data.frame(a = 1), class = "colonnade")
str(proxy)
structure(data.frame(a = new_key(a)), class = "colonnade")
structure(data.frame(a = new_key("a")), class = "colonnade")
proxyÂ§a
proxy$a
summary(proxy)
proxy
class(proxy$a)
new_key("a")
data.frame(a = new_key("a"))
x
traceback()
?squeeze
squeeze(x)
pillar::squeeze
?colonnade_get_width
pillar:::colonnade_get_width
x
library(tectr)
x
str(x)
squeeze(x)
squeeze(x, width = 10)
traceback()
pillar:::colonnade_get_width()
pillar:::colonnade_get_width
x
library(tectr)
x
library(tectr)
x
x
library(tectr)
library(tectr)
variable()
x
tibble(a = new_key("a", c("a", "b")))
tibble(a = new_key(NULL, "a", c("a", "b")))
?pillar_shaft
pillar:::pillar_shaft.numeric
x
library(tectr)
devtools::install_github("rlib/crayon")
devtools::install_github("r-lib/crayon")
x
devtools::use_package("crayon")
crayon::red("no key")
pillar::style_subtle("a")
library(tectr)
tibble(a = new_key(NULL))
tibble(a = new_key(NULL, "a"))
tibble(a = as_key(lapply(1:24, function(x) letters[seq_len(x)])))
tibble(a = as_key(lapply(1:24, function(x) letters[seq_len(x)])), )
tibble(a = as_key(lapply(1:24, function(x) letters[seq_len(x)])), b = 1:24)
tibble(a = as_key(lapply(1:24, function(x) letters[seq_len(x)])), b = 1:24) %>% print(max.width = 20)
tibble(a = as_key(lapply(1:24, function(x) letters[seq_len(x)])), b = 1:24) %>% print(max.width = 10)
library(tectr)
tibble(a = as_key(lapply(1:24, function(x) letters[seq_len(x)])), b = 1:24) %>% print(max.width = 10)
tibble(a = as_key(lapply(1:24, function(x) letters[seq_len(x)])), b = 1:24) %>% print(width = 10)
tibble(a = as_key(lapply(1:24, function(x) letters[seq_len(x)])), b = 1:24) %>% print(width = 35)
variables(cl)
library(tectr)
tst1 <- collection_df(bind_cols(mtcars, name = row.names(mtcars)), key = "name")
library(tectr)
library(tidyverse)
tst1 <- collection_df(bind_cols(mtcars, name = row.names(mtcars)), key = "name")
tst2 <- collection_df(bind_cols(iris, id = row.names(iris)), key = "id")
tst <- collection(tst1, tst2)
tst
as.list(tst)
library(tectr)
tst[[1]]
tst[[2]]
i <- 2
var <- variables(x)[i, ]
x <- tst
var <- variables(x)[i, ]
var
assertthat::assert_that(length(unique(var$nr_lst)) == 1)
class(x) <- class(x) %>% magrittr::extract(. != "collection")
x
ret <- x[[i]] # Sort to assure uniqueness.
ret
tst[[2]]
library(tectr)
library(tectr)
tst <- collection(tst1, tst2)
variables(tst)
mutate(variables(tst), df_key = as_key(df_key))
as_key(variables(tst)$df_key)
variables(tst$df_key)
variables(tst)$df_key
variables(tst)$df_key %>% as_key
class(variables(tst)$df_key)
f <- function(...) list(...)
g <- function(x) do.call("f", x)
library(tectr)
variables(tst)$df_key %>% as_key
library(tectr)
as_key(list(c("a", "b"), "a"))
tst <- collection(tst1, tst2)
str(as_key(variables(x)$df_key))
str(as_key(variables(tst)$df_key))
library(tectr)
tst <- collection(tst1, tst2)
tst
tst[[2:6]]
tst[[2:10]]
tst[[2:13]]
?`[[`
collection()
list()
list()[[0]]
lt <- list(1, 2)
lt
lt <- list(1, 2, 3)
lt
lt[[2]] <- NULL
lt
collection_df()
join(x, NULL)
join(tst, NULL)
join(tst, collection())
`[[`
?.Primitive
get("[[")
.Primitive("[[")
lt
lt[2] <- NULL
lt
lt[0] <- NULL
lt
lt[0]
?rank
rank(5:10)
rank(c(1,5:10))
rank(rep(5:10, 3))
rank(rep(5:10, 3), "first")
rank(rep(5:10, 3), ties.method = "first")
rank(rep(5:10, 3), ties.method = "min")
?recode
?order
order(1:5)
order(5:1)
order(c(1,2,1))
sort(1:5)
sort(5:1)
?map_int
library(tectr)
tst
tst1
tst1 <- collection_df(bind_cols(mtcars, name = row.names(mtcars)), key = "name")
library(tidyverse)
tst1 <- collection_df(bind_cols(mtcars, name = row.names(mtcars)), key = "name")
tst2 <- collection_df(bind_cols(iris, id = row.names(iris)), key = "id")
tst2
tst <- collection(tst1, tst2)
collection(tst1)
collection(tst1) -> tst
tst[[1]]
tst[[i=]]
tst[[i=1]]
library(tectr)
tst <- collection(tst1, tst2)
library(tectr)
tst <- collection(tst1, tst2)
variables(tst1)
variable(tst1)
variables(tst1)
variables
tst <- collection(tst1, tst2)
x
x <- collection(tst1)
x
class(x)
y <- tst2
y
name <- NULL
is_collection(y)
is_collection_df(y)
key(x)
assertthat::assert_that(
length(name) <= 1,
has_key(y) | length(name) == 1
)
if(!is.null(name)) assertthat::assert_that(has_key(y) | name != "")
vars <- variables(x)
vars
n_vars <- variable(
ind_name = names(y), col = names(y),
df_name = dplyr::if_else(is.null(name), "", name),
df_key = key(y),
is_key = names(y) %in% key(y)[[1]], nr_lst = length(x) + 1
)
n_vars
if(is.null(name)) n_name <- ""
else n_name <- name
compatible_vars <- dplyr::filter(vars, df_name == n_name,
df_key == key(y))
compatible_vars
lst_nr <- unique(compatible_vars$nr_lst)
lst_nr
assertthat::assert_that(length(lst_nr) <= 1)
if(length(lst_nr) == 0) {
lst_nr <- length(x) + 1
x[[lst_nr]] <- y
}
length(lst_nr) == 0
length(lst_nr)
lst_nr
attr(x, "variables") <- bind_rows(
variables(x),
variable(ind_name = names(y), col = names(y), df_name = n_name,
df_key = key(y), is_key = names(y) %in% key(y)[[1]],
nr_lst = lst_nr)
)
x
class(x)
x[[2]]
x <- tst1
collection(tst1) -> x
class(x)
vars <- variables(x)
n_vars <- variable(
ind_name = names(y), col = names(y),
df_name = dplyr::if_else(is.null(name), "", name),
df_key = key(y),
is_key = names(y) %in% key(y)[[1]], nr_lst = length(x) + 1
)
tst1
x
class(x)
join(x, NULL)
library(tectr)
library(tectr)
tst <- collection(tst1, tst2)
library(tectr)
tst <- collection(tst1, tst2)
tst
variables(x)
variables(tst)
?nest
?map
package?purrr
library(tectr)
library(tectr)
