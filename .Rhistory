vignette("compatibility", package = "dplyr")
?match
?append
append(1:5, 0:1)
append(list(1,5), 1)
append(list(1,5), list(1))
append(list(1,5), list(list(1)))
append(list(1,5), list(1))[[3]]
library(tectr)
rm(collection)
library(tectr)
c_x <- collection_df(data.frame(a = 5:15, b = letters[5:15],
stringsAsFactors = FALSE), "a")
c_y <- collection_df(data.frame(a = 1:10, b = letters[1:10],
stringsAsFactors = FALSE), "a")
collection(c_x, c_y)
collection(c_x, c_y)
library(tectr)
collection(c_x, c_y)
c_x
c_y
key(c_x)
key(c_y)
key(c_y) <- "b"
collection(c_x, c_y)
library(tectr)
collection(c_x, c_y)
library(tectr)
collection(c_x, c_y)
c_x
class(c_x)
collection(c_x, c_y)
x
value
x
args
library(tectr)
2
2
2
library(tectr)
c_x <- collection_df(data.frame(a = 5:15, b = letters[5:15],
c = 0:11), key = "a")
c_x <- collection_df(data.frame(a = 5:15, b = letters[5:15]))
c_y <- collection_df(data.frame(c = 1:11, b = letters[5:15]))
c_x
c_y
join(c_x, c_y)
key(c_x) <- "a"
key(c_y) <- "c"
collection(c_x, c_y)
f
f <- function(...) rlang::enexprs(...)
inp <- f(c_x, c_y)
inp
do.call("collection", inp[-length(inp)])
inp[-length(inp)]
do.call("collection", inp[-length(inp)]) -> x
inp[[length(inp)]]
y <- eval(inp[[length(inp)]])
y
class(y)
class(x)
class(x[[1]])
names(inp)[length(inp)])
names(inp)[length(inp)]
names(inp)[length(inp)] -> name
asserthat::assert_that(!(is.null(name) | name == "") | has_key(y))
assertthat::assert_that(!(is.null(name) | name == "") | has_key(y))
nm <- namekey(x)
new_nm <- dplyr::tibble(
name = dplyr::if_else(is.null(name), "", name),
key = list(key(y))
)
new_nm
nm
nm$key
new_nm$key
nm$key[1]
nm$key[[1]]
k <- match(as.list(data.frame(t(new_nm))),
as.list(data.frame(t(nm))))
k
x <- append(x, y)
x
class(x)
x = do.call("collection", inp[-length(inp)])
x[[2]] <- y
x
class(x)
x[[length(x) + 1]] <- y
namekey(x) <- dplyr::bind_rows(nm, new_nm)
attr(x, "namekey") <- dplyr::bind_rows(nm, new_nm)
x
library(tectr)
c_x <- collection_df(data.frame(a = 5:15, b = letters[5:15]))
c_y <- collection_df(data.frame(c = 1:11, b = letters[5:15]))
collection(c_x, c_y)
key(x) <- "a"
c
x
key(c_x) <- "a"
key(c_y) <- "c"
collection(c_x, c_y)
collection(a = c_x, c_y)
key(c_x) <- "b"
key(c_y) <- "b"
collection(c_x, c_y)
library(tectr)
collection(c_x, c_y)
library(tectr)
collection(c_x, c_y)
library(tectr)
collection(c_x, c_y)
collection(a = c_x, c_y)
c_x <- collection_df(data.frame(a = 5:15, b = letters[5:15]))
collection(c_x)
collection(c_x, c_y)
key(c_y) <- NULL
collection(c_x, c_y)
library(tectr)
devtools::test()
collection(c_x)
has_key(c_x)
library(tectr)
devtools::test()
expect_identical(length(collection()), 0L)
c_x <- collection_df(data.frame(a = 5:15, b = letters[5:15]))
expect_error(collection(c_x))
c_y <- collection_df(data.frame(c = 1:11, b = letters[5:15]))
expect_identical(length(collection(a = c_x, b = c_y)), 2L)
expect_error(collection(c_x, c_y))
key(c_x) <- "b"
key(c_y) <- "c"
expect_identical(length(collection(c_x, c_y)), 2L)
key(c_y) <- "b"
expect_identical(length(collection(c_x, c_y)), 1L)
devtools::test()
c_x <- collection_df(data.frame(a = 5:15, b = letters[5:15]))
expect_error(collection(c_x))
c_y <- collection_df(data.frame(c = 1:11, b = letters[5:15]))
expect_identical(length(collection(a = c_x, b = c_y)), 2L)
expect_error(collection(c_x, c_y))
key(c_x) <- "b"
key(c_y) <- "c"
expect_identical(length(collection(c_x, c_y)), 2L)
collection(c_x, c_y)
collection(c_x, c_y) %>% length
key(c_y) <- "b"
collection(c_x, c_y)
devtools::test()
rm(list = ls())
expect_identical(length(collection()), 0L)
c_x <- collection_df(data.frame(a = 5:15, b = letters[5:15]))
expect_error(collection(c_x))
c_y <- collection_df(data.frame(c = 1:11, b = letters[5:15]))
expect_identical(length(collection(a = c_x, b = c_y)), 2L)
expect_error(collection(c_x, c_y))
key(c_x) <- "b"
key(c_y) <- "c"
expect_identical(length(collection(c_x, c_y)), 2L)
key(c_y) <- "b"
expect_identical(length(collection(c_x, c_y)), 1L)
test_that("collections can be built", {
expect_identical(length(collection()), 0L)
c_x <- collection_df(data.frame(a = 5:15, b = letters[5:15]))
expect_error(collection(c_x))
c_y <- collection_df(data.frame(c = 1:11, b = letters[5:15]))
expect_identical(length(collection(a = c_x, b = c_y)), 2L)
expect_error(collection(c_x, c_y))
key(c_x) <- "b"
key(c_y) <- "c"
expect_identical(length(collection(c_x, c_y)), 2L)
key(c_y) <- "b"
expect_identical(length(collection(c_x, c_y)), 1L)
})
expect_identical(length(collection()), 0L)
library(testthat)
expect_identical(length(collection()), 0L)
library(tectr)
expect_identical(length(collection()), 0L)
c_x <- collection_df(data.frame(a = 5:15, b = letters[5:15]))
expect_error(collection(c_x))
c_y <- collection_df(data.frame(c = 1:11, b = letters[5:15]))
expect_identical(length(collection(a = c_x, b = c_y)), 2L)
expect_error(collection(c_x, c_y))
key(c_x) <- "b"
key(c_y) <- "c"
expect_identical(length(collection(c_x, c_y)), 2L)
key(c_y) <- "b"
expect_identical(length(collection(c_x, c_y)), 1L)
test_that("collections can be built", {
expect_identical(length(collection()), 0L)
c_x <- collection_df(data.frame(a = 5:15, b = letters[5:15]))
expect_error(collection(c_x))
c_y <- collection_df(data.frame(c = 1:11, b = letters[5:15]))
expect_identical(length(collection(a = c_x, b = c_y)), 2L)
expect_error(collection(c_x, c_y))
key(c_x) <- "b"
key(c_y) <- "c"
expect_identical(length(collection(c_x, c_y)), 2L)
key(c_y) <- "b"
expect_identical(length(collection(c_x, c_y)), 1L)
})
c_x <- collection_df(data.frame(a = 5:15, b = letters[5:15]))
collection(c_x)
library(tectr)
devtools::test()
library(tectr)
devtools::test()
c_x <- collection_df(data.frame(a = 5:15, b = letters[5:15]), key = "a")
c_y <- collection_df(data.frame(c = 1:11, b = letters[5:15]), key = "b")
cl <- collection(a = c_x, b = c_y)
names(cl) <- "a"
expect_identical(length(cl), 2L)
key(cl) <- list("b", "b")
expect_identical(length(cl), 1L)
expect_identical(names(cl), "a")
expect_identical(key(cl), list("b"))
cl <- join(cl, collection_df(tibble(b = "e", a = 1, c = 1), key = "b"),
name = "con")
expect_error(namekey(cl) <- tibble(name = "", key = list("b")))
cl <- collection(a = c_x, b = c_y)
c_z <- collection_df(data.frame(c = 1:11, b = letters[5:15]), key = "c")
expect_equal(join(cl, collection(b = c_y, c = c_z)),
collection(a = c_x, b = c_y, c = c_z))
x <- join(cl, collection(b = c_y, c = c_z))
y <- collection(a = c_x, b = c_y, c = c_z)
x
y
test_that("Collection collapse", {
c_x <- collection_df(data.frame(a = 5:15, b = letters[5:15]), key = "a")
c_y <- collection_df(data.frame(c = 1:11, b = letters[5:15]), key = "b")
cl <- collection(a = c_x, b = c_y)
names(cl) <- "a"
expect_identical(length(cl), 2L)
key(cl) <- list("b", "b")
expect_identical(length(cl), 1L)
expect_identical(names(cl), "a")
expect_identical(key(cl), list("b"))
cl <- join(cl, collection_df(tibble(b = "e", a = 1, c = 1), key = "b"),
name = "con")
expect_error(namekey(cl) <- tibble(name = "", key = list("b")))
cl <- collection(a = c_x, b = c_y)
c_z <- collection_df(data.frame(c = 1:11, b = letters[5:15]), key = "c")
expect_equal(join(cl, collection(b = c_y, c = c_z)),
collection(a = c_x, b = c_y, c = c_z))
})
c_x <- collection_df(data.frame(a = 5:15, b = letters[5:15]), key = "a")
c_y <- collection_df(data.frame(c = 1:11, b = letters[5:15]), key = "b")
cl <- collection(a = c_x, b = c_y)
names(cl) <- "a"
expect_identical(length(cl), 2L)
key(cl) <- list("b", "b")
expect_identical(length(cl), 1L)
expect_identical(names(cl), "a")
expect_identical(key(cl), list("b"))
cl <- join(cl, collection_df(tibble(b = "e", a = 1, c = 1), key = "b"),
name = "con")
expect_error(namekey(cl) <- tibble(name = "", key = list("b")))
cl <- collection(a = c_x, b = c_y)
c_z <- collection_df(data.frame(c = 1:11, b = letters[5:15]), key = "c")
expect_equal(join(cl, collection(b = c_y, c = c_z)),
collection(a = c_x, b = c_y, c = c_z))
traceback()
expect_identical(join(cl, collection(b = c_y, c = c_z)),
collection(a = c_x, b = c_y, c = c_z))
devtools::test()
devtools::test()
devtools::test()
covr::report()
expect_identical(join(cl, c_z), join(c_z, c_l))
library(tectr)
devtools::test()
TRUE | NULL != ""
library(tectr)
devtools::test()
library(tectr)
devtools::test()
devtools::test()
devtools::check()
install.packages("dplyr")
devtools::build()
covr::report()
library(tectr)
arrange.collection_df()
arrange.collection_df
library(tectr)
devtools::test()
devtools::check()
devtools::test()
devtools::check()
?is
?Methods_Details
?Methods_for_S3
?setGeneric
package?glue
?collapse
collapse(backtick(1:10))
library(glue)
collapse(backtick(1:10))
collapse(backtick(1:10), sep = "/")
collapse(backtick(1:10), last = "/")
glue::collapse
?nzchar
?collapse
glue(11:20, width = 5)
glue(x = 11:20, width = 5)
glue(x = backtick(11:20), width = 5)
glue(x = backtick(11:20), width = 10)
collapse(x = backtick(11:20), width = 10)
?setMethod
?append
?trunc
?is
library(tectr)
?exportMethod
library(roxygen2)
package?roxygen2
vignette("namespace", package = "roxygen2")
?try
?tryCatch
tryCatch(stop("e"), finally = print("Hello"))
try(stop("e"))
try(stop("e"), silent = TRUE)
try(stop("e"), error = function() print("f"))
tryCatch(stop("e"), error = function() print("f"))
tryCatch(1, finally = print("Hello"))
assertCondition(stop("e"), "error")
library(tools)
assertCondition(stop("e"), "error")
assertCondition(stop("e"), "error") %>% print
library(tidyverse)
assertCondition(stop("e"), "error") %>% print
new(c("Indicator", "Ind_Source"))
collection()
?setGeneric
?setMethod
1:5[[3]]
(1:5)[[3]]
new("indicator")
new("Indicator")
new("Indicator", ind_source = "VDem")
new("Indicator", ind_source = new("IndSource"))
library(tectr)
new_key(NULL)
new_key(NULL) != new_key(NULL)
`!=.key` <- function(e1, e2) !(e1 == e2)
new_key(NULL) != new_key(NULL)
library(tectr)
new_key(NULL) == new_key(NULL)
new_key(NULL) != new_key(NULL)
new_key(NULL) <= new_key(NULL)
new_key(NULL) <= new_key(NULL)
library(tectr)
new_key(NULL) <= new_key(NULL)
new_key(NULL) <= new_key(NULL, c("a", "b)"))
new_key(NULL) <= new_key(NULL, c("a", "b"))
new_key(NULL, "a", "b") <= new_key(NULL, c("a", "b"))
has_key(collection_df())
has_key(collection_df(tibble()))
library(dplyr)
has_key(collection_df(tibble()))
df <- data.frame(a = 1:10, b = 2 * (1:10))
c_df <- collection_df(df)
select(c_df, a)
collection_df(select(df,a))
key(c_df) <- "a"
expect_identical(c_df, select(c_df, b))
library(devtools)
library(testthat)
expect_identical(select(c_df, a), collection_df(select(df, a)))
c_df <- collection_df(df)
expect_identical(select(c_df, a), collection_df(select(df, a)))
key(c_df) <- "a"
expect_identical(c_df, select(c_df, b))
c_df
select(c_df, b)
select(c_df, NULL)
library(tectr)
?has_key
rm(`!=.key`)
test_that("select", {
library(dplyr)
df <- data.frame(a = 1:10, b = 2 * (1:10))
c_df <- collection_df(df)
expect_identical(select(c_df, a), collection_df(select(df, a)))
key(c_df) <- "a"
expect_identical(c_df, select(c_df, b))
expect_error(select(c_df, a = b))
expect_error(select(c_df, b = a, b))
expect_identical(select(c_df, a), collection_df(select(df, a), "a"))
})
df <- data.frame(a = 1:10, b = 2 * (1:10))
c_df <- collection_df(df)
expect_identical(select(c_df, a), collection_df(select(df, a)))
key(c_df) <- "a"
has_key(c_df)
library(tidyselect)
.data <- c_df
selected_vars <- tidyselect::vars_select(names(.data), ...)
selected_vars <- tidyselect::vars_select(names(.data), b)
selected_vars
selected_keys <- selected_vars %>% magrittr::extract(. %in% key(.data)[[1]])
selected_keys
other_keys <- key(.data)[[1]] %>% magrittr::extract(!(. %in% selected_keys))
other_keys
n_key <- new_key(c(names(selected_keys), other_keys))
n_key
class(.data) <- setdiff(class(.data), c("collection_df", "collection_el"))
ret <- dplyr::select(.data, ..., !!other_keys)
ret <- dplyr::select(.data, b, !!other_keys)
ret
assertthat::assert_that(length(names(ret)) == length(unique(names(ret))))
collection_df(ret, key = n_key)
c_df
select(c_df,b)
class(c_df)
library(dplyr)
select(c_df,b)
library(sloop)
s3_dispatch(select(c_df, b))
devtools::missing_s3()
library(tectr)
select
library(dplyr)
df <- data.frame(a = 1:10, b = 2 * (1:10))
c_df <- collection_df(df)
library(tectr)
c_df <- collection_df(df)
expect_identical(select(c_df, a), collection_df(select(df, a)))
select(c_df, a)
library(tectr)
library(dplyr)
select(c_df, a)
library(tectr)
?use_series
library(tectr)
library(tectr)
library(tectr)
equals(new_key(NULL), new_key(NULL))
magrittr::equals(new_key(NULL), new_key(NULL))
package_required("base")
tectr::package_required("base")
tectr:::package_required("base")
f <- function(a, c) 2 * a
key(f)
library(tectr)
key(f)
attr(f, "key")
library(tectr)
key(f)
key(f) <- "a"
key(f)
new_key("a")
library(tectr)
c_x <- collection_df(data.frame(a = 5:15, b = letters[5:15],
stringsAsFactors = FALSE), "a")
c_y <- collection_df(data.frame(a = 1:10, b = letters[1:10],
stringsAsFactors = FALSE), "a")
expect_identical(arrange(join(c_x, c_y), a),
collection_df(data.frame(a = 1:15, b = letters[1:15],
stringsAsFactors = FALSE), "a"))
join(c_x, c_y)
join
join.collection_df
key(c_x)
key(c_y)
has_key(c_y)
key(c_x) == key(c_y)
ret <-
dplyr::full_join(x, y, copy = copy, by = key(x), suffix = c("", ".y"), ...)
ret <-
dplyr::full_join(c_x, c_y, copy = copy, by = key(x), suffix = c("", ".y"))
ret <-
dplyr::full_join(c_x, c_y, copy = copy, by = key(c_x), suffix = c("", ".y"))
join_key(c_x, c_y, key(x))
key(c)
key(x)
library(tectr)
indicator()
?indicator
paste0(NULL, collapse = ", ")
paste0(NULL, collapse = ", ") %>% str_split(pattern = fixed(", "))
paste0(NULL, collapse = ", ") %>% stringr::str_split(pattern = fixed(", "))
paste0(NULL, collapse = ", ") %>% stringr::str_split(pattern = stringr::fixed(", "))
empty_vars <- variable()
empty_vars
library(tectr)
variable()
empty_vars <- tectr:::variable()
empty_vars
expect_true(is_collection_df(empty_vars))
library(testthat)
expect_true(is_collection_df(empty_vars))
expect_true(is.data.frame(empty_vars))
expect_true(setequal(key(empty_vars), c("col", "df_name", "df_key")))
key(empty_vars)
expect_true(key(empty_vars) == new_key(c("col", "df_name", "df_key")))
vars1 <- tectr:::variable(ind_name = "indicator1",
col = "indicator_one",
df_key = c("key_one"))
vars1
library(tectr)
?update
?updateR
??update
install.packages("installr")
installr::updateR()
install.packages("dplyr")
library(tectr)
getRversion()
